D G "__PCH__" 0 37 ""5.008""
D G "__DEVICE__" 0 37 "4550"
D G "__DATE__" 0 37 ""29-jul-14""
D G "__TIME__" 0 37 ""12:58:33"" "libreria hid_bootloader permite que se haga un remapeo de la memotia del pic*"
c L "set_tris_a" 2 1 22 "FUNCTION"
v L "value" 2 36 "int8" `54 
f B "set_tris_a" 2 36 "void(int8 value)" `53 
v L "value" 2 37 "int8" `56 
f B "set_tris_b" 2 37 "void(int8 value)" `55 
v L "value" 2 38 "int8" `58 
f B "set_tris_c" 2 38 "void(int8 value)" `57 
v L "value" 2 39 "int8" `60 
f B "set_tris_d" 2 39 "void(int8 value)" `59 
v L "value" 2 40 "int8" `62 
f B "set_tris_e" 2 40 "void(int8 value)" `61 
f B "get_tris_a" 2 41 "int8()" `63 
f B "get_tris_b" 2 42 "int8()" `64 
f B "get_tris_c" 2 43 "int8()" `65 
f B "get_tris_d" 2 44 "int8()" `66 
f B "get_tris_e" 2 45 "int8()" `67 
v L "value" 2 46 "int8" `69 
f B "output_a" 2 46 "void(int8 value)" `68 
v L "value" 2 47 "int8" `71 
f B "output_b" 2 47 "void(int8 value)" `70 
v L "value" 2 48 "int8" `73 
f B "output_c" 2 48 "void(int8 value)" `72 
v L "value" 2 49 "int8" `75 
f B "output_d" 2 49 "void(int8 value)" `74 
v L "value" 2 50 "int8" `77 
f B "output_e" 2 50 "void(int8 value)" `76 
f B "input_a" 2 51 "int8()" `78 
f B "input_b" 2 52 "int8()" `79 
f B "input_c" 2 53 "int8()" `80 
f B "input_d" 2 54 "int8()" `81 
f B "input_e" 2 55 "int8()" `82 
f B "input_change_a" 2 56 "int8()" `83 
f B "input_change_b" 2 57 "int8()" `84 
f B "input_change_c" 2 58 "int8()" `85 
f B "input_change_d" 2 59 "int8()" `86 
f B "input_change_e" 2 60 "int8()" `87 
v L "pin" 2 61 "int16" `89 
f B "input" 2 61 "int8(int16 pin)" `88 
v L "pin" 2 62 "int16" `91 
f B "input_state" 2 62 "int8(int16 pin)" `90 
v L "pin" 2 63 "int16" `93 
f B "output_low" 2 63 "void(int16 pin)" `92 
v L "pin" 2 64 "int16" `95 
f B "output_high" 2 64 "void(int16 pin)" `94 
v L "pin" 2 65 "int16" `97 
f B "output_toggle" 2 65 "void(int16 pin)" `96 
v L "pin" 2 66 "int16" `99 
v L "level" 2 66 "int8" `100 
f B "output_bit" 2 66 "void(int16 pin,int8 level)" `98 
v L "pin" 2 67 "int16" `102 
f B "output_float" 2 67 "void(int16 pin)" `101 
v L "pin" 2 68 "int16" `104 
f B "output_drive" 2 68 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 72 "31744"
d G "PIN_A1" 2 73 "31745"
d G "PIN_A2" 2 74 "31746"
d G "PIN_A3" 2 75 "31747"
d G "PIN_A4" 2 76 "31748"
d G "PIN_A5" 2 77 "31749"
d G "PIN_A6" 2 78 "31750"
d G "PIN_B0" 2 80 "31752"
d G "PIN_B1" 2 81 "31753"
d G "PIN_B2" 2 82 "31754"
d G "PIN_B3" 2 83 "31755"
d G "PIN_B4" 2 84 "31756"
d G "PIN_B5" 2 85 "31757"
d G "PIN_B6" 2 86 "31758"
d G "PIN_B7" 2 87 "31759"
d G "PIN_C0" 2 89 "31760"
d G "PIN_C1" 2 90 "31761"
d G "PIN_C2" 2 91 "31762"
d G "PIN_C4" 2 92 "31764"
d G "PIN_C5" 2 93 "31765"
d G "PIN_C6" 2 94 "31766"
d G "PIN_C7" 2 95 "31767"
d G "PIN_D0" 2 97 "31768"
d G "PIN_D1" 2 98 "31769"
d G "PIN_D2" 2 99 "31770"
d G "PIN_D3" 2 100 "31771"
d G "PIN_D4" 2 101 "31772"
d G "PIN_D5" 2 102 "31773"
d G "PIN_D6" 2 103 "31774"
d G "PIN_D7" 2 104 "31775"
d G "PIN_E0" 2 106 "31776"
d G "PIN_E1" 2 107 "31777"
d G "PIN_E2" 2 108 "31778"
d G "PIN_E3" 2 109 "31779"
d G "PIN_E7" 2 110 "31783"
d G "FALSE" 2 113 "0"
d G "TRUE" 2 114 "1"
d G "BYTE" 2 116 "int8"
d G "BOOLEAN" 2 117 "int1"
d G "getc" 2 119 "getch"
d G "fgetc" 2 120 "getch"
d G "getchar" 2 121 "getch"
d G "putc" 2 122 "putchar"
d G "fputc" 2 123 "putchar"
d G "fgets" 2 124 "gets"
d G "fputs" 2 125 "puts"
c L "output_drive" 2 1 3 "FUNCTION"
f B "restart_cause" 2 130 "int8()" `105 
f B "reset_cpu" 2 131 "void()" `106 
f B "sleep" 2 132 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 134 "7"
d G "MCLR_FROM_SLEEP" 2 135 "11"
d G "MCLR_FROM_RUN" 2 136 "15"
d G "NORMAL_POWER_UP" 2 137 "12"
d G "BROWNOUT_RESTART" 2 138 "14"
d G "WDT_FROM_SLEEP" 2 139 "3"
d G "RESET_INSTRUCTION" 2 140 "0"
d G "SLEEP_FULL" 2 143 "0" "Default"
d G "SLEEP_IDLE" 2 144 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 5 "FUNCTION"
v L "mode" 2 151 "int8" `109 
f B "setup_timer_0" 2 151 "void(int8 mode)" `108 
v L "value" 2 152 "int16" `111 
f B "set_timer0" 2 152 "void(int16 value)" `110 
f B "get_timer0" 2 153 "int16()" `112 
v L "mode" 2 154 "int8" `114 
v L "prescaler" 2 154 "int8" `115 
f B "setup_counters" 2 154 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 155 "int16" `117 
f B "set_rtcc" 2 155 "void(int16 value)" `116 
f B "get_rtcc" 2 156 "int16()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 158 "0"
d G "T0_EXT_L_TO_H" 2 159 "32"
d G "T0_EXT_H_TO_L" 2 160 "48"
d G "T0_DIV_1" 2 162 "8"
d G "T0_DIV_2" 2 163 "0"
d G "T0_DIV_4" 2 164 "1"
d G "T0_DIV_8" 2 165 "2"
d G "T0_DIV_16" 2 166 "3"
d G "T0_DIV_32" 2 167 "4"
d G "T0_DIV_64" 2 168 "5"
d G "T0_DIV_128" 2 169 "6"
d G "T0_DIV_256" 2 170 "7"
d G "T0_OFF" 2 172 "0x80"
d G "T0_8_BIT" 2 174 "0x40"
d G "RTCC_INTERNAL" 2 176 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 177 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 178 "48"
d G "RTCC_DIV_1" 2 179 "8"
d G "RTCC_DIV_2" 2 180 "0"
d G "RTCC_DIV_4" 2 181 "1"
d G "RTCC_DIV_8" 2 182 "2"
d G "RTCC_DIV_16" 2 183 "3"
d G "RTCC_DIV_32" 2 184 "4"
d G "RTCC_DIV_64" 2 185 "5"
d G "RTCC_DIV_128" 2 186 "6"
d G "RTCC_DIV_256" 2 187 "7"
d G "RTCC_OFF" 2 188 "0x80"
d G "RTCC_8_BIT" 2 189 "0x40"
c L "get_rtcc" 2 1 8 "FUNCTION"
v L "mode" 2 200 "int16" `120 
f B "setup_wdt" 2 200 "void(int16 mode)" `119 
f B "restart_wdt" 2 201 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 203 "0x100"
d G "WDT_OFF" 2 204 "0"
d G "WDT_4MS" 2 206 "0x300"
d G "WDT_8MS" 2 207 "0x500"
d G "WDT_16MS" 2 208 "0x700"
d G "WDT_32MS" 2 209 "0x900"
d G "WDT_64MS" 2 210 "0xB00"
d G "WDT_128MS" 2 211 "0xD00"
d G "WDT_256MS" 2 212 "0xF00"
d G "WDT_512MS" 2 213 "0x1100"
d G "WDT_1S" 2 214 "0x1300"
d G "WDT_2S" 2 215 "0x1500"
d G "WDT_4S" 2 216 "0x1700"
d G "WDT_8S" 2 217 "0x1900"
d G "WDT_16" 2 218 "0x1B00"
d G "WDT_32S" 2 219 "0x1D00"
d G "WDT_64S" 2 220 "0x1F00"
d G "WDT_128S" 2 221 "0x2100"
c L "restart_wdt" 2 1 3 "FUNCTION"
v L "mode" 2 227 "int16" `123 
f B "setup_timer_1" 2 227 "void(int16 mode)" `122 
f B "get_timer1" 2 228 "int16()" `124 
v L "value" 2 229 "int16" `126 
f B "set_timer1" 2 229 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 232 "0"
d G "T1_INTERNAL" 2 233 "0x85"
d G "T1_EXTERNAL" 2 234 "0x87"
d G "T1_EXTERNAL_SYNC" 2 235 "0x83"
d G "T1_CLK_OUT" 2 237 "8"
d G "T1_DIV_BY_1" 2 239 "0"
d G "T1_DIV_BY_2" 2 240 "0x10"
d G "T1_DIV_BY_4" 2 241 "0x20"
d G "T1_DIV_BY_8" 2 242 "0x30"
c L "set_timer1" 2 1 3 "FUNCTION"
v L "mode" 2 247 "int8" `128 
v L "period" 2 247 "int8" `129 
v L "postscale" 2 247 "int8" `130 
f B "setup_timer_2" 2 247 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 248 "int8()" `131 
v L "value" 2 249 "int8" `133 
f B "set_timer2" 2 249 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 251 "0"
d G "T2_DIV_BY_1" 2 252 "4"
d G "T2_DIV_BY_4" 2 253 "5"
d G "T2_DIV_BY_16" 2 254 "6"
c L "set_timer2" 2 1 3 "FUNCTION"
v L "mode" 2 259 "int16" `135 
f B "setup_timer_3" 2 259 "void(int16 mode)" `134 
f B "get_timer3" 2 260 "int16()" `136 
v L "value" 2 261 "int16" `138 
f B "set_timer3" 2 261 "void(int16 value)" `137  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 264 "0"
d G "T3_INTERNAL" 2 265 "0x85"
d G "T3_EXTERNAL" 2 266 "0x87"
d G "T3_EXTERNAL_SYNC" 2 267 "0x83"
d G "T3_DIV_BY_1" 2 269 "0"
d G "T3_DIV_BY_2" 2 270 "0x10"
d G "T3_DIV_BY_4" 2 271 "0x20"
d G "T3_DIV_BY_8" 2 272 "0x30"
c L "set_timer3" 2 1 4 "FUNCTION"
v L "mode" 2 278 "int32" `140 
f B "setup_ccp1" 2 278 "void(int32 mode)" `139 
v L "mode" 2 279 "int32" `142 
v L "pwm" 2 279 "int8" `143 
f G "setup_ccp1" 2 279 "void(int32 mode,int8 pwm)" `141 
v L "value" 2 280 "int16" `145 
f B "set_pwm1_duty" 2 280 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 282 "0"
d G "CCP_CAPTURE_FE" 2 283 "4"
d G "CCP_CAPTURE_RE" 2 284 "5"
d G "CCP_CAPTURE_DIV_4" 2 285 "6"
d G "CCP_CAPTURE_DIV_16" 2 286 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 287 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 288 "9"
d G "CCP_COMPARE_INT" 2 289 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 290 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 291 "0xB"
d G "CCP_PWM" 2 292 "0xC"
d G "CCP_PWM_PLUS_1" 2 293 "0x1c"
d G "CCP_PWM_PLUS_2" 2 294 "0x2c"
d G "CCP_PWM_PLUS_3" 2 295 "0x3c"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 301 "0x48"
d G "T3_CCP2" 2 302 "0x8"
d G "CCP_PWM_H_H" 2 305 "0x0c"
d G "CCP_PWM_H_L" 2 306 "0x0d"
d G "CCP_PWM_L_H" 2 307 "0x0e"
d G "CCP_PWM_L_L" 2 308 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 310 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 311 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 312 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 314 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 315 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 316 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 317 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 318 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 319 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 320 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 322 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 323 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 324 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 326 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 327 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 328 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 330 "0x80000000"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
v L "mode" 2 334 "int32" `150 
f B "setup_ccp2" 2 334 "void(int32 mode)" `149 
v L "mode" 2 335 "int32" `152 
v L "pwm" 2 335 "int8" `153 
f G "setup_ccp2" 2 335 "void(int32 mode,int8 pwm)" `151 
v L "value" 2 336 "int16" `155 
f B "set_pwm2_duty" 2 336 "void(int16 value)" `154 
c L "set_pwm2_duty" 2 1 5 "FUNCTION"
v L "mode" 2 345 "int8" `160 
f B "setup_psp" 2 345 "void(int8 mode)" `159 
f B "psp_output_full" 2 346 "int8()" `161 
f B "psp_input_full" 2 347 "int8()" `162 
f B "psp_overflow" 2 348 "int8()" `163  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 350 "0x10"
d G "PSP_DISABLED" 2 351 "0"
c L "psp_overflow" 2 1 3 "FUNCTION"
v L "mode" 2 358 "int32" `166 
f B "setup_spi" 2 358 "void(int32 mode)" `165 
v L "value" 2 359 "int8" `168 
f B "spi_write" 2 359 "void(int8 value)" `167 
f B "spi_read" 2 360 "int8()" `169 
v L "value" 2 361 "int8" `171 
f G "spi_read" 2 361 "int8(int8 value)" `170 
f B "spi_data_in" 2 362 "int8()" `172  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 364 "0x00"
d G "SPI_MASTER" 2 365 "0x20"
d G "SPI_SLAVE" 2 366 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 367 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 368 "0x00"
d G "SPI_CLK_DIV_4" 2 369 "0x00"
d G "SPI_CLK_DIV_16" 2 370 "0x01"
d G "SPI_CLK_DIV_64" 2 371 "0x02"
d G "SPI_CLK_T2" 2 372 "0x03"
d G "SPI_SS_DISABLED" 2 373 "0x01"
d G "SPI_XMIT_L_TO_H" 2 375 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 376 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 378 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 379 "0x8000"
d G "SPI_L_TO_H" 2 382 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 383 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 1 2 "FUNCTION"
v L "baud" 2 387 "int32" `174 
f B "setup_uart" 2 387 "void(int32 baud)" `173 
v L "baud" 2 388 "int32" `176 
v L "stream" 2 388 "int8" `177 
f G "setup_uart" 2 388 "void(int32 baud,int8 stream)" `175 
v L "baud" 2 389 "int32" `179 
v L "stream" 2 389 "int8" `180 
v L "clock" 2 389 "int32" `181 
f G "setup_uart" 2 389 "void(int32 baud,int8 stream,int32 clock)" `178 
v L "baud" 2 390 "int32" `183 
f B "set_uart_speed" 2 390 "void(int32 baud)" `182 
v L "baud" 2 391 "int32" `185 
v L "stream" 2 391 "int8" `186 
f G "set_uart_speed" 2 391 "void(int32 baud,int8 stream)" `184 
v L "baud" 2 392 "int32" `188 
v L "stream" 2 392 "int8" `189 
v L "clock" 2 392 "int32" `190 
f G "set_uart_speed" 2 392 "void(int32 baud,int8 stream,int32 clock)" `187  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 396 "2"
d G "UART_DATA" 2 397 "4"
d G "UART_AUTODETECT" 2 398 "8"
d G "UART_AUTODETECT_NOWAIT" 2 399 "9"
d G "UART_WAKEUP_ON_RDA" 2 400 "10"
d G "UART_SEND_BREAK" 2 401 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
v L "mode" 2 405 "int32" `192 
f B "setup_comparator" 2 405 "void(int32 mode)" `191  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 407 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 408 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 409 "0xbcf05"
d G "NC_NC_NC_NC" 2 410 "0x0ff07"
d G "A0_A3_A1_A2" 2 411 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 412 "0x9ef01"
d G "A0_VR_A1_VR" 2 413 "0x3ff06"
d G "A3_VR_A2_VR" 2 414 "0xcff0e"
d G "CP1_INVERT" 2 415 "0x0000010"
d G "CP2_INVERT" 2 416 "0x0000020"
c L "setup_comparator" 2 1 2 "FUNCTION"
v L "mode" 2 423 "int8" `196 
f B "setup_vref" 2 423 "void(int8 mode)" `195  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 425 "0xa0"
d G "VREF_HIGH" 2 426 "0x80"
d G "VREF_F5" 2 428 "0x40"
d G "VREF_COMP" 2 429 "0x10"
c L "setup_vref" 2 1 2 "FUNCTION"
v L "mode" 2 433 "int8" `198 
f B "setup_low_volt_detect" 2 433 "void(int8 mode)" `197  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 435 "0x1F"
d G "LVD_45" 2 436 "0x1E"
d G "LVD_42" 2 437 "0x1D"
d G "LVD_40" 2 438 "0x1C"
d G "LVD_38" 2 439 "0x1B"
d G "LVD_36" 2 440 "0x1A"
d G "LVD_35" 2 441 "0x19"
d G "LVD_33" 2 442 "0x18"
d G "LVD_30" 2 443 "0x17"
d G "LVD_28" 2 444 "0x16"
d G "LVD_27" 2 445 "0x15"
d G "LVD_25" 2 446 "0x14"
d G "LVD_24" 2 447 "0x13"
d G "LVD_23" 2 448 "0x12"
d G "LVD_22" 2 449 "0x11"
d G "LVD_21" 2 450 "0x10"
d G "LVD_TRIGGER_BELOW" 2 452 "0"
d G "LVD_TRIGGER_ABOVE" 2 453 "0x80"
c L "setup_low_volt_detect" 2 1 2 "FUNCTION"
v L "mode" 2 458 "int16" `200 
f B "setup_oscillator" 2 458 "int8(int16 mode)" `199 
v L "mode" 2 459 "int16" `202 
v L "tune" 2 459 "sint8" `203 
f G "setup_oscillator" 2 459 "int8(int16 mode,sint8 tune)" `201  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 462 "0"
d G "OSC_125KHZ" 2 463 "0x10"
d G "OSC_250KHZ" 2 464 "0x20"
d G "OSC_500KHZ" 2 465 "0x30"
d G "OSC_1MHZ" 2 466 "0x40"
d G "OSC_2MHZ" 2 467 "0x50"
d G "OSC_4MHZ" 2 468 "0x60"
d G "OSC_8MHZ" 2 469 "0x70"
d G "OSC_TIMER1" 2 471 "1"
d G "OSC_INTRC" 2 472 "2"
d G "OSC_NORMAL" 2 473 "0"
d G "OSC_IDLE_MODE" 2 475 "0x80"
d G "OSC_31250" 2 476 "0x8000"
d G "OSC_STATE_STABLE" 2 480 "4"
d G "OSC_STATE_EXT_RUNNING" 2 481 "8"
c L "setup_oscillator" 2 1 4 "FUNCTION"
v L "mode" 2 488 "int16" `205 
f B "setup_adc" 2 488 "void(int16 mode)" `204 
f B "read_adc" 2 489 "int8()" `206 
v L "mode" 2 490 "int8" `208 
f G "read_adc" 2 490 "int8(int8 mode)" `207 
f G "read_adc" 2 491 "int16()" `209 
v L "mode" 2 492 "int8" `211 
f G "read_adc" 2 492 "int16(int8 mode)" `210 
f B "adc_done" 2 493 "int8()" `212  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 495 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 496 "0x100"
d G "ADC_CLOCK_DIV_4" 2 497 "0x04"
d G "ADC_CLOCK_DIV_8" 2 498 "0x01"
d G "ADC_CLOCK_DIV_16" 2 499 "0x05"
d G "ADC_CLOCK_DIV_32" 2 500 "0x02"
d G "ADC_CLOCK_DIV_64" 2 501 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 502 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 504 "0x00"
d G "ADC_TAD_MUL_2" 2 505 "0x08"
d G "ADC_TAD_MUL_4" 2 506 "0x10"
d G "ADC_TAD_MUL_6" 2 507 "0x18"
d G "ADC_TAD_MUL_8" 2 508 "0x20"
d G "ADC_TAD_MUL_12" 2 509 "0x28"
d G "ADC_TAD_MUL_16" 2 510 "0x30"
d G "ADC_TAD_MUL_20" 2 511 "0x38"
c L "adc_done" 2 1 1 "FUNCTION"
v L "pins" 2 514 "int8" `214 
f B "setup_adc_ports" 2 514 "void(int8 pins)" `213 
v L "pins" 2 515 "int8" `216 
v L "reference" 2 515 "int8" `217 
f G "setup_adc_ports" 2 515 "void(int8 pins,int8 reference)" `215 
v L "channel" 2 516 "int8" `219 
f B "set_adc_channel" 2 516 "void(int8 channel)" `218  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 519 "0x0F" "None"
d G "ALL_ANALOG" 2 520 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 521 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 522 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 523 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 524 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 525 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 526 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 527 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 528 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 529 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 530 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 531 "0x0D" "A0 A1"
d G "AN0" 2 532 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 533 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 534 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 535 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 536 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 537 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 538 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 539 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 540 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 541 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 542 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 543 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 544 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 547 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 548 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 549 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 550 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 553 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 554 "1"
d G "ADC_READ_ONLY" 2 555 "6"
c L "set_adc_channel" 2 1 3 "FUNCTION"
v L "x" 2 561 "sint8" `221 
f B "abs" 2 561 "sint8(sint8 x)" `220 
v L "x" 2 562 "sint16" `223 
f G "abs" 2 562 "sint16(sint16 x)" `222 
v L "x" 2 563 "sint32" `225 
f G "abs" 2 563 "sint32(sint32 x)" `224 
v L "x" 2 564 "float" `227 
f G "abs" 2 564 "float(float x)" `226 
v L "??65535" 2 565 "int8" `229 
v L "??65535" 2 565 "int8" `230 
f B "_mul" 2 565 "int16(int8 ,int8 )" `228 
v L "??65535" 2 566 "sint8" `229 
v L "??65535" 2 566 "sint8" `233 
f G "_mul" 2 566 "sint16(sint8 ,sint8 )" `231 
v L "??65535" 2 567 "int16" `229 
v L "??65535" 2 567 "int16" `236 
f G "_mul" 2 567 "int32(int16 ,int16 )" `234 
v L "??65535" 2 568 "sint16" `229 
v L "??65535" 2 568 "sint16" `239 
f G "_mul" 2 568 "sint32(sint16 ,sint16 )" `237  "Memory Manipulation Prototypes:"
v L "bank" 2 571 "int8" `241 
v L "offset" 2 571 "int8" `242 
f B "read_bank" 2 571 "int8(int8 bank,int8 offset)" `240 
v L "bank" 2 572 "int8" `244 
v L "offset" 2 572 "int8" `245 
v L "value" 2 572 "int8" `246 
f B "write_bank" 2 572 "void(int8 bank,int8 offset,int8 value)" `243 
v L "dest" 2 573 "*int8" `248 
v L "src" 2 573 "*int8" `249 
f B "strcpy" 2 573 "void(*int8 dest,*int8 src)" `247 
v L "dest" 2 574 "*int8" `251 
v L "src" 2 574 "*int8" `252 
f B "strcopy" 2 574 "void(*int8 dest,*int8 src)" `250 
v L "destination" 2 575 "*int8" `254 
v L "value" 2 575 "int8" `255 
v L "num" 2 575 "int16" `256 
f B "memset" 2 575 "void(*int8 destination,int8 value,int16 num)" `253 
v L "destination" 2 576 "*int8" `258 
v L "source" 2 576 "*int8" `259 
v L "num" 2 576 "int16" `260 
f B "memcpy" 2 576 "void(*int8 destination,*int8 source,int16 num)" `257  "String Prototypes:"
v L "cvalue" 2 579 "int8" `262 
f B "toupper" 2 579 "int8(int8 cvalue)" `261 
v L "cvalue" 2 580 "int8" `264 
f B "tolower" 2 580 "int8(int8 cvalue)" `263 
v L "string" 2 581 "*int8" `266 
v L "cstring" 2 581 "*int8" `267 
f B "sprintf" 2 581 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `265  "Data Manipulators Prototypes:"
v L "address" 2 584 "*int8" `270 
v L "bytes" 2 584 "int8" `271 
v L "value" 2 584 "int8" `272 
f B "shift_left" 2 584 "int8(*int8 address,int8 bytes,int8 value)" `269 
v L "address" 2 585 "*int8" `274 
v L "bytes" 2 585 "int8" `275 
v L "value" 2 585 "int8" `276 
f B "shift_right" 2 585 "int8(*int8 address,int8 bytes,int8 value)" `273 
v L "address" 2 586 "*int8" `278 
v L "bytes" 2 586 "int8" `279 
f B "rotate_left" 2 586 "void(*int8 address,int8 bytes)" `277 
v L "address" 2 587 "*int8" `281 
v L "bytes" 2 587 "int8" `282 
f B "rotate_right" 2 587 "void(*int8 address,int8 bytes)" `280 
v L "value" 2 588 "int8" `284 
f B "swap" 2 588 "void(int8 value)" `283 
v L "var" 2 589 "int16" `286 
v L "offset" 2 589 "int8" `287 
f B "make8" 2 589 "int8(int16 var,int8 offset)" `285 
v L "var" 2 590 "int32" `286 
v L "offset" 2 590 "int8" `290 
f G "make8" 2 590 "int8(int32 var,int8 offset)" `288 
v L "varhigh" 2 591 "int8" `292 
v L "varlow" 2 591 "int8" `293 
f B "make16" 2 591 "int16(int8 varhigh,int8 varlow)" `291 
v L "var1" 2 592 "int16" `295 
f B "make32" 2 592 "int32(int16 var1)" `294 
v L "var1" 2 593 "int16" `297 
v L "var2" 2 593 "int16" `298 
f G "make32" 2 593 "int32(int16 var1,int16 var2)" `296 
v L "var1" 2 594 "int16" `297 
v L "var2" 2 594 "int8" `301 
f G "make32" 2 594 "int32(int16 var1,int8 var2)" `299 
v L "var1" 2 595 "int16" `303 
v L "var2" 2 595 "int8" `304 
v L "var3" 2 595 "int8" `305 
f G "make32" 2 595 "int32(int16 var1,int8 var2,int8 var3)" `302 
v L "var1" 2 596 "int8" `307 
f G "make32" 2 596 "int32(int8 var1)" `306 
v L "var1" 2 597 "int8" `297 
v L "var2" 2 597 "int8" `310 
f G "make32" 2 597 "int32(int8 var1,int8 var2)" `308 
v L "var1" 2 598 "int8" `303 
v L "var2" 2 598 "int8" `304 
v L "var3" 2 598 "int8" `314 
f G "make32" 2 598 "int32(int8 var1,int8 var2,int8 var3)" `311 
v L "var1" 2 599 "int8" `316 
v L "var2" 2 599 "int8" `317 
v L "var3" 2 599 "int8" `318 
v L "var4" 2 599 "int8" `319 
f G "make32" 2 599 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `315 
v L "var1" 2 600 "int8" `297 
v L "var2" 2 600 "int16" `322 
f G "make32" 2 600 "int32(int8 var1,int16 var2)" `320 
v L "var1" 2 601 "int8" `303 
v L "var2" 2 601 "int16" `304 
v L "var3" 2 601 "int8" `326 
f G "make32" 2 601 "int32(int8 var1,int16 var2,int8 var3)" `323 
v L "var1" 2 602 "int8" `303 
v L "var2" 2 602 "int8" `304 
v L "var3" 2 602 "int16" `330 
f G "make32" 2 602 "int32(int8 var1,int8 var2,int16 var3)" `327 
v L "var" 2 603 "int8" `332 
v L "bit" 2 603 "int8" `333 
f B "bit_set" 2 603 "void(int8 var,int8 bit)" `331 
v L "var" 2 604 "int16" `332 
v L "bit" 2 604 "int8" `336 
f G "bit_set" 2 604 "void(int16 var,int8 bit)" `334 
v L "var" 2 605 "int32" `332 
v L "bit" 2 605 "int8" `339 
f G "bit_set" 2 605 "void(int32 var,int8 bit)" `337 
v L "var" 2 606 "int8" `341 
v L "bit" 2 606 "int8" `342 
f B "bit_clear" 2 606 "void(int8 var,int8 bit)" `340 
v L "var" 2 607 "int16" `341 
v L "bit" 2 607 "int8" `345 
f G "bit_clear" 2 607 "void(int16 var,int8 bit)" `343 
v L "var" 2 608 "int32" `341 
v L "bit" 2 608 "int8" `348 
f G "bit_clear" 2 608 "void(int32 var,int8 bit)" `346 
v L "var" 2 609 "int8" `350 
v L "bit" 2 609 "int8" `351 
f B "bit_test" 2 609 "int8(int8 var,int8 bit)" `349 
v L "var" 2 610 "int16" `350 
v L "bit" 2 610 "int8" `354 
f G "bit_test" 2 610 "int8(int16 var,int8 bit)" `352 
v L "var" 2 611 "int32" `350 
v L "bit" 2 611 "int8" `357 
f G "bit_test" 2 611 "int8(int32 var,int8 bit)" `355  "#use delay() Prototypes:"
v L "count" 2 614 "int8" `359 
f B "delay_cycles" 2 614 "void(int8 count)" `358 
v L "time" 2 615 "int16" `361 
f B "delay_ms" 2 615 "void(int16 time)" `360 
v L "time" 2 616 "int16" `363 
f B "delay_us" 2 616 "void(int16 time)" `362  "#use rs232() Prototypes:"
v L "cdata" 2 619 "int8" `365 
f B "putchar" 2 619 "void(int8 cdata)" `364 
v L "cdata" 2 620 "int8" `367 
v L "stream" 2 620 "int8" `368 
f G "putchar" 2 620 "void(int8 cdata,int8 stream)" `366 
v L "string" 2 621 "*int8" `370 
f B "puts" 2 621 "void(*int8 string)" `369 
v L "string" 2 622 "*int8" `372 
v L "stream" 2 622 "int8" `373 
f G "puts" 2 622 "void(*int8 string,int8 stream)" `371 
f B "getch" 2 623 "int8()" `374 
v L "stream" 2 624 "int8" `376 
f G "getch" 2 624 "int8(int8 stream)" `375 
v L "string" 2 625 "*int8" `378 
f B "gets" 2 625 "void(*int8 string)" `377 
v L "string" 2 626 "*int8" `380 
v L "stream" 2 626 "int8" `381 
f G "gets" 2 626 "void(*int8 string,int8 stream)" `379 
f B "kbhit" 2 627 "int8()" `382 
v L "stream" 2 628 "int8" `384 
f G "kbhit" 2 628 "int8(int8 stream)" `383 
v L "string" 2 629 "*int8" `386 
f B "printf" 2 629 "void(*int8 string,*int8 _VA_LIST)" `385 
v L "stream" 2 630 "int8" `389 
v L "string" 2 630 "*int8" `390 
f B "fprintf" 2 630 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `388 
f B "putc_send" 2 631 "void()" `392 
v L "stream" 2 632 "int8" `394 
f B "fputc_send" 2 632 "void(int8 stream)" `393 
f B "rcv_buffer_full" 2 633 "int8()" `395 
v L "stream" 2 634 "int8" `397 
f G "rcv_buffer_full" 2 634 "int8(int8 stream)" `396 
f B "rcv_buffer_bytes" 2 635 "int16()" `398 
v L "stream" 2 636 "int8" `400 
f G "rcv_buffer_bytes" 2 636 "int16(int8 stream)" `399 
f B "tx_buffer_full" 2 637 "int8()" `401 
v L "stream" 2 638 "int8" `403 
f G "tx_buffer_full" 2 638 "int8(int8 stream)" `402 
f B "tx_buffer_bytes" 2 639 "int16()" `404 
v L "stream" 2 640 "int8" `406 
f G "tx_buffer_bytes" 2 640 "int16(int8 stream)" `405  "#use i2c() Prototypes:"
f B "i2c_read" 2 643 "int8()" `407 
v L "stream" 2 644 "int8" `409 
f G "i2c_read" 2 644 "int8(int8 stream)" `408 
v L "stream" 2 645 "int8" `411 
v L "ack" 2 645 "int8" `412 
f G "i2c_read" 2 645 "int8(int8 stream,int8 ack)" `410 
v L "data" 2 646 "int8" `414 
f B "i2c_write" 2 646 "int8(int8 data)" `413 
v L "stream" 2 647 "int8" `416 
v L "data" 2 647 "int8" `417 
f G "i2c_write" 2 647 "int8(int8 stream,int8 data)" `415 
f B "i2c_start" 2 648 "void()" `418 
v L "stream" 2 649 "int8" `420 
f G "i2c_start" 2 649 "void(int8 stream)" `419 
v L "stream" 2 650 "int8" `422 
v L "restart" 2 650 "int8" `423 
f G "i2c_start" 2 650 "void(int8 stream,int8 restart)" `421 
f B "i2c_stop" 2 651 "void()" `424 
v L "stream" 2 652 "int8" `426 
f G "i2c_stop" 2 652 "void(int8 stream)" `425 
f B "i2c_isr_state" 2 653 "int8()" `427 
v L "addr" 2 654 "int8" `429 
f B "i2c_slaveaddr" 2 654 "void(int8 addr)" `428 
v L "stream" 2 655 "int8" `431 
v L "addr" 2 655 "int8" `432 
f G "i2c_slaveaddr" 2 655 "void(int8 stream,int8 addr)" `430 
f B "i2c_poll" 2 656 "int8()" `433 
v L "stream" 2 657 "int8" `435 
f G "i2c_poll" 2 657 "int8(int8 stream)" `434 
v L "baud" 2 658 "int32" `437 
f B "i2c_init" 2 658 "void(int32 baud)" `436 
v L "stream" 2 659 "int8" `439 
v L "baud" 2 659 "int32" `440 
f G "i2c_init" 2 659 "void(int8 stream,int32 baud)" `438  "#use spi() Prototypes:"
f B "spi_xfer" 2 662 "int8()" `441 
f G "spi_xfer" 2 663 "int16()" `442 
f G "spi_xfer" 2 664 "int32()" `443 
v L "data" 2 665 "int8" `445 
f G "spi_xfer" 2 665 "int8(int8 data)" `444 
v L "data" 2 666 "int16" `447 
f G "spi_xfer" 2 666 "int16(int16 data)" `446 
v L "data" 2 667 "int32" `449 
f G "spi_xfer" 2 667 "int32(int32 data)" `448 
v L "stream" 2 668 "int8" `451 
v L "data" 2 668 "int8" `452 
f G "spi_xfer" 2 668 "int8(int8 stream,int8 data)" `450 
v L "stream" 2 669 "int8" `451 
v L "data" 2 669 "int16" `455 
f G "spi_xfer" 2 669 "int16(int8 stream,int16 data)" `453 
v L "stream" 2 670 "int8" `451 
v L "data" 2 670 "int32" `458 
f G "spi_xfer" 2 670 "int32(int8 stream,int32 data)" `456 
v L "stream" 2 671 "int8" `460 
v L "data" 2 671 "int8" `461 
v L "bits" 2 671 "int8" `462 
f G "spi_xfer" 2 671 "int8(int8 stream,int8 data,int8 bits)" `459 
v L "stream" 2 672 "int8" `460 
v L "data" 2 672 "int16" `461 
v L "bits" 2 672 "int8" `466 
f G "spi_xfer" 2 672 "int16(int8 stream,int16 data,int8 bits)" `463 
v L "stream" 2 673 "int8" `460 
v L "data" 2 673 "int32" `461 
v L "bits" 2 673 "int8" `470 
f G "spi_xfer" 2 673 "int32(int8 stream,int32 data,int8 bits)" `467 
v L "baud" 2 674 "int32" `472 
f B "spi_init" 2 674 "void(int32 baud)" `471 
v L "stream" 2 675 "int8" `474 
v L "baud" 2 675 "int32" `475 
f G "spi_init" 2 675 "void(int8 stream,int32 baud)" `473 
v L "baud" 2 676 "int32" `477 
f B "spi_speed" 2 676 "void(int32 baud)" `476 
v L "stream" 2 677 "int8" `479 
v L "baud" 2 677 "int32" `480 
f G "spi_speed" 2 677 "void(int8 stream,int32 baud)" `478 
v L "stream" 2 678 "int8" `482 
v L "baud" 2 678 "int32" `483 
v L "clock" 2 678 "int32" `484 
f G "spi_speed" 2 678 "void(int8 stream,int32 baud,int32 clock)" `481 
v L "data" 2 679 "int8" `486 
f B "spi_prewrite" 2 679 "void(int8 data)" `485 
v L "data" 2 680 "int16" `488 
f G "spi_prewrite" 2 680 "void(int16 data)" `487 
v L "data" 2 681 "int32" `490 
f G "spi_prewrite" 2 681 "void(int32 data)" `489 
v L "??65535" 2 682 "int8" `492 
v L "data" 2 682 "int8" `493 
f G "spi_prewrite" 2 682 "void(int8 ,int8 data)" `491 
v L "??65535" 2 683 "int8" `492 
v L "data" 2 683 "int16" `496 
f G "spi_prewrite" 2 683 "void(int8 ,int16 data)" `494 
v L "??65535" 2 684 "int8" `492 
v L "data" 2 684 "int32" `499 
f G "spi_prewrite" 2 684 "void(int8 ,int32 data)" `497 
f B "spi_xfer_in" 2 685 "int8()" `500 
f G "spi_xfer_in" 2 686 "int16()" `501 
f G "spi_xfer_in" 2 687 "int32()" `502 
v L "bits" 2 688 "int8" `504 
f G "spi_xfer_in" 2 688 "int8(int8 bits)" `503 
v L "bits" 2 689 "int8" `506 
f G "spi_xfer_in" 2 689 "int16(int8 bits)" `505 
v L "bits" 2 690 "int8" `508 
f G "spi_xfer_in" 2 690 "int32(int8 bits)" `507 
v L "stream" 2 691 "int8" `510 
v L "bits" 2 691 "int8" `511 
f G "spi_xfer_in" 2 691 "int8(int8 stream,int8 bits)" `509 
v L "stream" 2 692 "int8" `510 
v L "bits" 2 692 "int8" `514 
f G "spi_xfer_in" 2 692 "int16(int8 stream,int8 bits)" `512 
v L "stream" 2 693 "int8" `510 
v L "bits" 2 693 "int8" `517 
f G "spi_xfer_in" 2 693 "int32(int8 stream,int8 bits)" `515  "#use rtos() Prototypes:"
f B "rtos_run" 2 696 "void()" `518 
f B "rtos_yield" 2 697 "void()" `519 
v L "task" 2 698 "int8" `521 
f B "rtos_enable" 2 698 "void(int8 task)" `520 
v L "task" 2 699 "int8" `523 
f B "rtos_disable" 2 699 "void(int8 task)" `522 
f B "rtos_terminate" 2 700 "void()" `524 
v L "flag" 2 701 "int8" `526 
f B "rtos_await" 2 701 "void(int8 flag)" `525 
v L "sem" 2 702 "int8" `528 
f B "rtos_wait" 2 702 "void(int8 sem)" `527 
v L "sem" 2 703 "int8" `530 
f B "rtos_signal" 2 703 "void(int8 sem)" `529 
v L "task" 2 704 "int8" `532 
v L "msg" 2 704 "int8" `533 
f B "rtos_msg_send" 2 704 "void(int8 task,int8 msg)" `531 
f B "rtos_msg_read" 2 705 "int8()" `534 
f B "rtos_msg_poll" 2 706 "int8()" `535 
v L "task" 2 707 "int8" `537 
f B "rtos_overrun" 2 707 "int8(int8 task)" `536 
v L "task" 2 708 "int8" `539 
v L "stat" 2 708 "*int8" `540 
f B "rtos_stats" 2 708 "void(int8 task,*int8 stat)" `538  "#use timer() Prototypes:"
f B "get_ticks" 2 711 "int8()" `541 
f G "get_ticks" 2 712 "int16()" `542 
f G "get_ticks" 2 713 "int32()" `543 
v L "stream" 2 714 "int8" `545 
f G "get_ticks" 2 714 "int8(int8 stream)" `544 
v L "stream" 2 715 "int8" `547 
f G "get_ticks" 2 715 "int16(int8 stream)" `546 
v L "stream" 2 716 "int8" `549 
f G "get_ticks" 2 716 "int32(int8 stream)" `548 
v L "value" 2 717 "int8" `551 
f B "set_ticks" 2 717 "void(int8 value)" `550 
v L "value" 2 718 "int16" `553 
f G "set_ticks" 2 718 "void(int16 value)" `552 
v L "value" 2 719 "int32" `555 
f G "set_ticks" 2 719 "void(int32 value)" `554 
v L "stream" 2 720 "int8" `557 
v L "value" 2 720 "int8" `558 
f G "set_ticks" 2 720 "void(int8 stream,int8 value)" `556 
v L "stream" 2 721 "int8" `557 
v L "value" 2 721 "int16" `561 
f G "set_ticks" 2 721 "void(int8 stream,int16 value)" `559 
v L "stream" 2 722 "int8" `557 
v L "value" 2 722 "int32" `564 
f G "set_ticks" 2 722 "void(int8 stream,int32 value)" `562  "#use pwm() Prototypes:"
f B "pwm_on" 2 725 "void()" `565 
v L "stream" 2 726 "int8" `567 
f G "pwm_on" 2 726 "void(int8 stream)" `566 
f B "pwm_off" 2 727 "void()" `568 
v L "stream" 2 728 "int8" `570 
f G "pwm_off" 2 728 "void(int8 stream)" `569 
v L "duty" 2 729 "int16" `572 
f B "pwm_set_duty" 2 729 "void(int16 duty)" `571 
v L "stream" 2 730 "int8" `574 
v L "duty" 2 730 "int16" `575 
f G "pwm_set_duty" 2 730 "void(int8 stream,int16 duty)" `573 
v L "percent" 2 731 "int16" `577 
f B "pwm_set_duty_percent" 2 731 "void(int16 percent)" `576 
v L "stream" 2 732 "int8" `579 
v L "percent" 2 732 "int16" `580 
f G "pwm_set_duty_percent" 2 732 "void(int8 stream,int16 percent)" `578 
v L "frequency" 2 733 "int32" `582 
f B "pwm_set_frequency" 2 733 "void(int32 frequency)" `581 
v L "stream" 2 734 "int8" `584 
v L "frequency" 2 734 "int32" `585 
f G "pwm_set_frequency" 2 734 "void(int8 stream,int32 frequency)" `583  "#use capture() Prototypes:"
f B "get_capture_time" 2 737 "int16()" `586 
v L "stream" 2 738 "int8" `588 
f G "get_capture_time" 2 738 "int16(int8 stream)" `587 
f B "get_capture_event" 2 739 "int8()" `589 
v L "stream" 2 740 "int8" `591 
f G "get_capture_event" 2 740 "int8(int8 stream)" `590  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 753 "int16" `593 
f B "goto_address" 2 753 "void(int16 address)" `592 
v L "label" 2 754 "int16" `595 
f B "label_address" 2 754 "int16(int16 label)" `594  "Program Memory Prototypes:"
v L "address" 2 757 "int16" `597 
v L "dataptr" 2 757 "*int8" `598 
v L "count" 2 757 "int16" `599 
f B "read_program_memory" 2 757 "void(int16 address,*int8 dataptr,int16 count)" `596 
v L "address" 2 758 "int16" `601 
f B "read_program_eeprom" 2 758 "int16(int16 address)" `600 
v L "address" 2 759 "int16" `603 
f B "erase_program_eeprom" 2 759 "void(int16 address)" `602 
v L "address" 2 760 "int16" `605 
v L "dataptr" 2 760 "*int8" `606 
v L "count" 2 760 "int16" `607 
f B "write_program_memory" 2 760 "void(int16 address,*int8 dataptr,int16 count)" `604 
v L "address" 2 761 "int16" `609 
v L "data" 2 761 "int16" `610 
f B "write_program_eeprom" 2 761 "void(int16 address,int16 data)" `608  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 766 "int16" `611 
v L "address" 2 771 "__EEADDRESS__" `613 
f B "read_eeprom" 2 771 "int8(__EEADDRESS__ address)" `612 
v L "address" 2 772 "__EEADDRESS__" `615 
v L "value" 2 772 "int8" `616 
f B "write_eeprom" 2 772 "void(__EEADDRESS__ address,int8 value)" `614  "INT"
c L "write_eeprom" 2 1 4 "FUNCTION"
v L "interrupt" 2 779 "int32" `618 
f B "enable_interrupts" 2 779 "void(int32 interrupt)" `617 
v L "interrupt" 2 780 "int32" `620 
f B "disable_interrupts" 2 780 "void(int32 interrupt)" `619 
v L "interrupt" 2 781 "int32" `622 
f B "clear_interrupt" 2 781 "void(int32 interrupt)" `621 
v L "interrupt" 2 782 "int32" `624 
f B "interrupt_active" 2 782 "int8(int32 interrupt)" `623 
v L "source" 2 783 "int8" `626 
v L "edge" 2 783 "int8" `627 
f B "ext_int_edge" 2 783 "void(int8 source,int8 edge)" `625 
v L "address" 2 784 "int16" `629 
f B "jump_to_irs" 2 784 "void(int16 address)" `628  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 786 "0x40"
d G "H_TO_L" 2 787 "0"
d G "GLOBAL" 2 789 "0xF2C0"
d G "PERIPH" 2 790 "0xF240"
d G "INT_RTCC" 2 791 "0x00F220"
d G "INT_TIMER0" 2 792 "0x00F220"
d G "INT_TIMER1" 2 793 "0x009D01"
d G "INT_TIMER2" 2 794 "0x009D02"
d G "INT_TIMER3" 2 795 "0x00A002"
d G "INT_EXT_L2H" 2 796 "0x5000F210"
d G "INT_EXT_H2L" 2 797 "0x6000F210"
d G "INT_EXT" 2 798 "0x00F210"
d G "INT_EXT1_L2H" 2 799 "0x5001F008"
d G "INT_EXT1_H2L" 2 800 "0x6001F008"
d G "INT_EXT1" 2 801 "0x00F008"
d G "INT_EXT2_L2H" 2 802 "0x5002F010"
d G "INT_EXT2_H2L" 2 803 "0x6002F010"
d G "INT_EXT2" 2 804 "0x00F010"
d G "INT_RB" 2 805 "0x00FFF208"
d G "INT_AD" 2 806 "0x009D40"
d G "INT_RDA" 2 807 "0x009D20"
d G "INT_TBE" 2 808 "0x009D10"
d G "INT_SSP" 2 809 "0x009D08"
d G "INT_CCP1" 2 810 "0x009D04"
d G "INT_CCP2" 2 811 "0x00A001"
d G "INT_BUSCOL" 2 812 "0x00A008"
d G "INT_LOWVOLT" 2 813 "0x00A004"
d G "INT_COMP" 2 814 "0x00A040"
d G "INT_EEPROM" 2 815 "0x00A010"
d G "INT_OSCF" 2 816 "0x00A080"
d G "INT_SPP" 2 817 "0x009D80"
d G "INT_USB" 2 818 "0x00A020"
D G "LOADER_SIZE" 1 9 " (0x0FFF)"
D G "LOADER_START" 1 10 " (0)"
D G "LOADER_END" 1 11 " (LOADER_SIZE)"
D G "APPLICATION_START" 1 12 " (LOADER_SIZE+1)"
D G "APPLICATION_END" 1 13 " (getenv("PROGRAM_MEMORY")-1)"
D G "APPLICATION_ISR" 1 14 " (APPLICATION_START+8)"
D G "RB0" 1 18 "PIN_B0"
D G "RB1" 1 19 "PIN_B1"
D G "RB2" 1 20 "PIN_B2"
D G "RB3" 1 21 "PIN_B3"
D G "RB4" 1 22 "PIN_B4"
D G "RB5" 1 23 "PIN_B5"
D G "RB6" 1 24 "PIN_B6"
D G "RB7" 1 25 "PIN_B7"
D G "RD0" 1 28 "PIN_D0"
D G "RD1" 1 29 "PIN_D1"
D G "RD2" 1 30 "PIN_D2"
D G "RD3" 1 31 "PIN_D3"
D G "RD4" 1 32 "PIN_D4"
D G "RD5" 1 33 "PIN_D5"
D G "RD6" 1 34 "PIN_D6"
D G "RD7" 1 35 "PIN_D7"
D G "A0" 1 37 "PIN_A0"
D G "A1" 1 38 "PIN_A1"
D G "A2" 1 39 "PIN_A2"
D G "A3" 1 40 "PIN_A3"
D G "A4" 1 41 "PIN_A5"
D G "A5" 1 42 "PIN_E0"
D G "A6" 1 43 "PIN_E1"
D G "A7" 1 44 "PIN_E2"
D G "RC0" 1 46 "PIN_C0"
D G "RC1" 1 47 "PIN_C1"
D G "RC2" 1 48 "PIN_C2"
D G "RA4" 1 50 "PIN_RA4"
D G "SALIDA" 1 73 "0"
D G "ENTRADA" 1 74 "1"
V L "pin" 1 76 "int16" `650 
V L "__estado" 1 76 "int8" `651 
F G "pinMode" 1 76 "void(int16 pin,int8 __estado)" `649 
D G "HIGH" 1 83 "1"
D G "Low" 1 84 "0"
V L "pin" 1 85 "int16" `657 
V L "estado" 1 85 "int8" `658 
F G "digitalWrite" 1 85 "void(int16 pin,int8 estado)" `656 
C L "get_float_usb" 3 2 242 "FUNCTION"
F G "get_float_usb" 3 248 "float()" `659 
F G "get_long_usb" 3 249 "sint16()" `660 
F G "get_int_usb" 3 250 "sint8()" `661 
V L "s" 3 251 "*int8" `663 
V L "max" 3 251 "int8" `664 
F G "get_string_usb" 3 251 "void(*int8 s,int8 max)" `662 
F G "gethex_usb" 3 252 "int8()" `665 
F G "gethex1_usb" 3 253 "int8()" `666 
D G "usb_cdc_kbhit" 3 258 "() (usb_cdc_get_buffer_status.got)"
D G "usb_cdc_putempty" 3 259 "() ((usb_cdc_put_buffer_nextin==0) && usb_cdc_put_buffer_free())"
D G "usb_cdc_putready" 3 260 "() (usb_cdc_put_buffer_nextin<sizeof(usb_cdc_put_buffer))"
D G "usb_cdc_connected" 3 261 "() (usb_cdc_got_set_line_coding)"
V L "c" 3 262 "int8" `668 
F G "usb_cdc_putc_fast" 3 262 "void(int8 c)" `667 
F G "usb_cdc_getc" 3 263 "int8()" `669 
V L "c" 3 264 "int8" `671 
F G "usb_cdc_putc" 3 264 "void(int8 c)" `670 
F G "usb_cdc_get_discard" 3 265 "void()" `672  "functions automatically called by USB handler code"
F G "usb_isr_tkn_cdc" 3 268 "void()" `673 
F G "usb_cdc_init" 3 269 "void()" `674 
F G "usb_isr_tok_out_cdc_control_dne" 3 270 "void()" `675 
F G "usb_isr_tok_in_cdc_data_dne" 3 271 "void()" `676 
F G "usb_isr_tok_out_cdc_data_dne" 3 272 "void()" `677 
F G "usb_cdc_flush_out_buffer" 3 274 "void()" `678  "Include the CCS USB Libraries.  See the comments at the top of these"
D G "__USB_PIC_PERIF__" 3 283 "1"
D G "__PIC18_USB_H__" 4 136 ""
D G "__USB_HARDWARE__" 4 138 ""
D G "__PIC__" 4 141 "1"
D G "USB_USE_FULL_SPEED" 4 144 "1"
D G "USB_MAX_EP0_PACKET_LENGTH" 4 157 "64"
D G "__USB_HW_LAYER_H__" 5 34 ""
E G "USB_DTS_DATA1" 5 36 "1" `692 
E G "USB_DTS_TOGGLE" 5 36 "2" `693 
E G "USB_DTS_DATA0" 5 37 "0" `694 
E G "USB_DTS_STALL" 5 37 "3" `695 
E G "USB_DTS_USERX" 5 37 "4" `696  "USER LEVEL FUNCTIONS:"
C L "usb_cdc_flush_out_buffer" 5 2 5 "FUNCTION"
F G "usb_init" 5 48 "void()" `697  "/* usb_init_cs()"
C L "usb_init" 5 2 4 "FUNCTION"
F G "usb_init_cs" 5 56 "void()" `698  "/* usb_task()"
C L "usb_init_cs" 5 2 4 "FUNCTION"
F G "usb_task" 5 64 "void()" `699  "/* usb_attach()"
C L "usb_task" 5 2 11 "FUNCTION"
F G "usb_attach" 5 79 "void()" `700  "/* usb_detach()"
C L "usb_attach" 5 2 14 "FUNCTION"
F G "usb_detach" 5 97 "void()" `701  "/* usb_put_packet()"
C L "usb_detach" 5 2 27 "FUNCTION"
V L "endpoint" 5 128 "int8" `703 
V L "ptr" 5 128 "*int8" `704 
V L "len" 5 128 "int16" `705 
V L "tgl" 5 128 "USB_DTS_BIT" `706 
F G "usb_put_packet" 5 128 "int8(int8 endpoint,*int8 ptr,int16 len,USB_DTS_BIT tgl)" `702  "/* usb_get_packet(endpoint, *ptr, max)"
C L "usb_put_packet" 5 2 22 "FUNCTION"
V L "endpoint" 5 154 "int8" `708 
V L "ptr" 5 154 "*int8" `709 
V L "max" 5 154 "int16" `710 
F G "usb_get_packet" 5 154 "int16(int8 endpoint,*int8 ptr,int16 max)" `707  "/* usb_kbhit(endpoint)"
C L "usb_get_packet" 5 2 12 "FUNCTION"
V L "en" 5 170 "int8" `712 
F G "usb_kbhit" 5 170 "int8(int8 en)" `711  "/* usb_tbe(endpoint)"
C L "usb_kbhit" 5 2 13 "FUNCTION"
V L "en" 5 187 "int8" `714 
F G "usb_tbe" 5 187 "int8(int8 en)" `713  "END USER LEVEL FUNCTIONS /////////////////////////////////////"
C L "usb_tbe" 5 2 16 "FUNCTION"
V L "endpoint" 5 212 "int8" `716 
F G "usb_stall_ep" 5 212 "void(int8 endpoint)" `715  "/* usb_unstall_ep(endpoint, direction)"
C L "usb_stall_ep" 5 2 10 "FUNCTION"
V L "endpoint" 5 227 "int8" `718 
F G "usb_unstall_ep" 5 227 "void(int8 endpoint)" `717  "/* usb_endpoint_stalled()"
C L "usb_unstall_ep" 5 2 15 "FUNCTION"
V L "endpoint" 5 246 "int8" `720 
F G "usb_endpoint_stalled" 5 246 "int8(int8 endpoint)" `719  "/* usb_set_address(address)"
C L "usb_endpoint_stalled" 5 2 7 "FUNCTION"
V L "address" 5 257 "int8" `722 
F G "usb_set_address" 5 257 "void(int8 address)" `721  "/* usb_set_configured()"
C L "usb_set_address" 5 2 10 "FUNCTION"
V L "config" 5 271 "int8" `724 
F G "usb_set_configured" 5 271 "void(int8 config)" `723  "/* usb_disable_endpoints()"
C L "usb_set_configured" 5 2 4 "FUNCTION"
F G "usb_disable_endpoints" 5 279 "void()" `725  "/* usb_disable_endpoint()"
C L "usb_disable_endpoints" 5 2 6 "FUNCTION"
V L "en" 5 290 "int8" `727 
F G "usb_disable_endpoint" 5 290 "void(int8 en)" `726  "/* usb_request_send_response(len)"
C L "usb_disable_endpoint" 5 2 28 "FUNCTION"
V L "len" 5 322 "int8" `729 
F G "usb_request_send_response" 5 322 "void(int8 len)" `728 
F G "usb_request_get_data" 5 323 "void()" `730 
F G "usb_request_stall" 5 324 "void()" `731  "EXTRA USER FUNCTIONS /////////////////////////////////"
C L "usb_request_stall" 4 178 15 "FUNCTION"
V L "endpoint" 4 194 "int8" `733 
V L "len" 4 194 "int16" `734 
V L "tgl" 4 194 "USB_DTS_BIT" `735 
F G "usb_flush_in" 4 194 "int8(int8 endpoint,int16 len,USB_DTS_BIT tgl)" `732  "/* usb_flush_out()"
C L "usb_flush_in" 4 178 13 "FUNCTION"
V L "endpoint" 4 211 "int8" `737 
V L "tgl" 4 211 "USB_DTS_BIT" `738 
F G "usb_flush_out" 4 211 "void(int8 endpoint,USB_DTS_BIT tgl)" `736  "/* usb_rx_packet_size()"
C L "usb_flush_out" 4 178 10 "FUNCTION"
V L "endpoint" 4 225 "int8" `740 
F G "usb_rx_packet_size" 4 225 "int16(int8 endpoint)" `739  "usb_desc_cdc.h                            ////"
D G "__USB_DESCRIPTORS__" 6 42 ""
D G "USB_CONFIG_PID" 6 46 "0x0033"
D G "USB_CONFIG_VID" 6 49 "0x0461"
D G "USB_CONFIG_BUS_POWER" 6 52 "100" "100mA  (range is 0..500)"
D G "USB_CONFIG_VERSION" 6 55 "0x0100" "01.00  //range is 00.00 to 99.99"
D G "USB_HID_DEVICE" 6 59 "FALSE"
D G "USB_CDC_DEVICE" 6 60 "TRUE"
D G "USB_CDC_COMM_IN_ENDPOINT" 6 62 "1"
D G "USB_CDC_COMM_IN_SIZE" 6 64 "11"
D G "USB_EP1_TX_ENABLE" 6 66 "USB_ENABLE_INTERRUPT"
D G "USB_EP1_TX_SIZE" 6 67 "USB_CDC_COMM_IN_SIZE"
D G "USB_CDC_DATA_IN_ENDPOINT" 6 70 "2"
D G "USB_CDC_DATA_IN_SIZE" 6 72 "64"
D G "USB_EP2_TX_ENABLE" 6 74 "USB_ENABLE_BULK"
D G "USB_EP2_TX_SIZE" 6 75 "USB_CDC_DATA_IN_SIZE"
D G "USB_CDC_DATA_OUT_ENDPOINT" 6 78 "2"
D G "USB_CDC_DATA_OUT_SIZE" 6 80 "64"
D G "USB_EP2_RX_ENABLE" 6 82 "USB_ENABLE_BULK"
D G "USB_EP2_RX_SIZE" 6 83 "USB_CDC_DATA_OUT_SIZE"
D G "__USB_PROTOTYPES__" 7 301 ""
D G "USB_HID_BOOT_PROTOCOL" 7 311 "FALSE"
D G "USB_HID_IDLE" 7 315 "FALSE"
D G "USB_OPT_FOR_ROM" 7 329 "TRUE"
C L "usb_rx_packet_size" 7 2 9 "FUNCTION"
F G "usb_enumerated" 7 348 "int8()" `741  "/* usb_wait_for_enumeration()"
C L "usb_enumerated" 7 2 6 "FUNCTION"
F G "usb_wait_for_enumeration" 7 358 "void()" `742  "/* usb_gets(endpoint, ptr, max, timeout)"
C L "usb_wait_for_enumeration" 7 2 14 "FUNCTION"
V L "endpoint" 7 376 "int8" `744 
V L "ptr" 7 376 "*int8" `745 
V L "max" 7 376 "int16" `746 
V L "timeout" 7 376 "int16" `747 
F G "usb_gets" 7 376 "int16(int8 endpoint,*int8 ptr,int16 max,int16 timeout)" `743  "/* usb_puts()"
C L "usb_gets" 7 2 16 "FUNCTION"
V L "endpoint" 7 396 "int8" `749 
V L "ptr" 7 396 "*int8" `750 
V L "len" 7 396 "int16" `751 
V L "timeout" 7 396 "int8" `752 
F G "usb_puts" 7 396 "int8(int8 endpoint,*int8 ptr,int16 len,int8 timeout)" `748  "/* usb_attached()"
D G "usb_attached" 7 408 "() TRUE"
C L "usb_puts" 7 2 10 "FUNCTION"
V L "endpoint" 7 422 "int8" `754 
F G "usb_endpoint_is_valid" 7 422 "int8(int8 endpoint)" `753  "END USER-LEVEL API /////////////////////////////////////////////////////"
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
E G "GET_DESCRIPTOR" 7 430 "1" `756 
E G "SET_ADDRESS" 7 430 "2" `757 
E G "NONE" 7 430 "0" `758 
E G "USB_GETDESC_CONFIG_TYPE" 7 432 "0" `760 
E G "USB_GETDESC_HIDREPORT_TYPE" 7 432 "1" `761 
E G "USB_GETDESC_STRING_TYPE" 7 432 "2" `762 
E G "USB_GETDESC_DEVICE_TYPE" 7 432 "3" `763 
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
T G "TYPE_USB_STACK_STATUS" 7 440 "{USB_STATES dev_req,int8 curr_config,int8 status_device,USB_GETDESC_TYPES getdesc_type}" `769 
V G "USB_stack_status" 7 450 "TYPE_USB_STACK_STATUS" `770  "/* usb_token_reset()"
C L "usb_endpoint_is_valid" 7 2 5 "FUNCTION"
F G "usb_token_reset" 7 459 "void()" `771  "/* usb_isr_tok_setup_dne()"
C L "usb_token_reset" 7 2 31 "FUNCTION"
F G "usb_isr_tok_setup_dne" 7 494 "void()" `772  "/* usb_isr_tok_out_dne()"
C L "usb_isr_tok_setup_dne" 7 2 10 "FUNCTION"
V L "endpoint" 7 508 "int8" `774 
F G "usb_isr_tok_out_dne" 7 508 "void(int8 endpoint)" `773  "/* usb_isr_tok_in_dne(endpoint)"
C L "usb_isr_tok_out_dne" 7 2 10 "FUNCTION"
V L "endpoint" 7 522 "int8" `776 
F G "usb_isr_tok_in_dne" 7 522 "void(int8 endpoint)" `775  "END STACK-LEVEL API USED BY HW DRIVERS /////////////////////////////////"
D G "USB_NUM_CONFIGURATIONS" 7 528 "1" "DO NOT CHANGE"
D G "PID_IN" 7 531 "0x09" "device to host transactions"
D G "PID_OUT" 7 532 "0x01" "host to device transactions"
D G "PID_SETUP" 7 533 "0x0D" "host to device setup transaction"
D G "PID_ACK" 7 534 "0x02" "receiver accepts error-free data packet"
D G "PID_DATA0" 7 535 "0x03" "data packet with even sync bit"
D G "PID_SOF" 7 536 "0x05" "start of framer marker and frame number"
D G "PID_NAK" 7 537 "0x0A" "receiver can't accept data or sender cant send data or has no data to transmit"
D G "PID_DATA1" 7 538 "0x0B" "data packet with odd sync bit"
D G "PID_PRE" 7 539 "0x0C" "preamble issued by host.  enables downstream traffic to low-speed device"
D G "PID_STALL" 7 540 "0x0E" "a control request isnt supported or the endpoint is halted"
D G "USB_DESC_DEVICE_TYPE" 7 543 "0x01" "#DEFINE USB_DEVICE_DESC_KEY      0x01"
D G "USB_DESC_CONFIG_TYPE" 7 544 "0x02" "#DEFINE USB_CONFIG_DESC_KEY      0x02"
D G "USB_DESC_STRING_TYPE" 7 545 "0x03" "#DEFINE USB_STRING_DESC_KEY      0x03"
D G "USB_DESC_INTERFACE_TYPE" 7 546 "0x04" "#DEFINE USB_INTERFACE_DESC_KEY   0x04"
D G "USB_DESC_ENDPOINT_TYPE" 7 547 "0x05" "#DEFINE USB_ENDPOINT_DESC_KEY    0x05"
D G "USB_DESC_CLASS_TYPE" 7 548 "0x21" "#DEFINE USB_CLASS_DESC_KEY       0x21"
D G "USB_DESC_HIDREPORT_TYPE" 7 549 "0x22"
D G "USB_DESC_IAD_TYPE" 7 550 "0x0b"
D G "USB_DESC_DEVICE_LEN" 7 553 "18" "#DEFINE USB_DEVICE_DESC_LEN      18"
D G "USB_DESC_CONFIG_LEN" 7 554 "9" "#DEFINE USB_CONFIG_DESC_LEN      9"
D G "USB_DESC_INTERFACE_LEN" 7 555 "9" "#DEFINE USB_INTERFACE_DESC_LEN   9"
D G "USB_DESC_CLASS_LEN" 7 556 "9" "#DEFINE USB_CLASS_DESC_LEN       9"
D G "USB_DESC_ENDPOINT_LEN" 7 557 "7" "#DEFINE USB_ENDPOINT_DESC_LEN    7"
D G "USB_DESC_IAD_LEN" 7 558 "8"
D G "USB_STANDARD_REQUEST_GET_STATUS" 7 561 "0x00"
D G "USB_STANDARD_REQUEST_CLEAR_FEATURE" 7 562 "0x01"
D G "USB_STANDARD_REQUEST_SET_FEATURE" 7 563 "0x03"
D G "USB_STANDARD_REQUEST_SET_ADDRESS" 7 564 "0x05"
D G "USB_STANDARD_REQUEST_GET_DESCRIPTOR" 7 565 "0x06"
D G "USB_STANDARD_REQUEST_SET_DESCRIPTOR" 7 566 "0x07"
D G "USB_STANDARD_REQUEST_GET_CONFIGURATION" 7 567 "0x08"
D G "USB_STANDARD_REQUEST_SET_CONFIGURATION" 7 568 "0x09"
D G "USB_STANDARD_REQUEST_GET_INTERFACE" 7 569 "0x0A"
D G "USB_STANDARD_REQUEST_SET_INTERFACE" 7 570 "0x0B"
D G "USB_STANDARD_REQUEST_SYNCH_FRAME" 7 571 "0x0C"
D G "USB_HID_REQUEST_GET_REPORT" 7 574 "0x01"
D G "USB_HID_REQUEST_GET_IDLE" 7 575 "0x02"
D G "USB_HID_REQUEST_GET_PROTOCOL" 7 576 "0x03"
D G "USB_HID_REQUEST_SET_REPORT" 7 577 "0x09"
D G "USB_HID_REQUEST_SET_IDLE" 7 578 "0x0A"
D G "USB_HID_REQUEST_SET_PROTOCOL" 7 579 "0x0B"
D G "USB_ENDPOINT_TYPE_CONTROL" 7 582 "0x00"
D G "USB_ENDPOINT_TYPE_ISOCHRONOUS" 7 583 "0x01"
D G "USB_ENDPOINT_TYPE_BULK" 7 584 "0x02"
D G "USB_ENDPOINT_TYPE_INTERRUPT" 7 585 "0x03"
D G "USB_ENABLE_DISABLED" 7 588 "-1"
D G "USB_ENABLE_BULK" 7 589 "USB_ENDPOINT_TYPE_BULK"
D G "USB_ENABLE_ISOCHRONOUS" 7 590 "USB_ENDPOINT_TYPE_ISOCHRONOUS"
D G "USB_ENABLE_INTERRUPT" 7 591 "USB_ENDPOINT_TYPE_INTERRUPT"
D G "USB_ENABLE_CONTROL" 7 592 "USB_ENDPOINT_TYPE_CONTROL"
D G "USB_EP0_TX_ENABLE" 7 597 "USB_ENABLE_CONTROL"
D G "USB_EP0_RX_ENABLE" 7 598 "USB_ENABLE_CONTROL"
D G "USB_EP0_RX_SIZE" 7 599 "USB_MAX_EP0_PACKET_LENGTH" "endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8"
D G "USB_EP0_TX_SIZE" 7 600 "USB_MAX_EP0_PACKET_LENGTH" "endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8"
D G "USB_EP1_RX_ENABLE" 7 607 "USB_ENABLE_DISABLED"
D G "USB_EP1_RX_SIZE" 7 614 "0"
D G "USB_EP3_TX_ENABLE" 7 666 "USB_ENABLE_DISABLED"
D G "USB_EP3_RX_ENABLE" 7 669 "USB_ENABLE_DISABLED"
D G "USB_EP3_RX_SIZE" 7 676 "0"
D G "USB_EP3_TX_SIZE" 7 687 "0"
D G "USB_EP4_TX_ENABLE" 7 697 "USB_ENABLE_DISABLED"
D G "USB_EP4_RX_ENABLE" 7 700 "USB_ENABLE_DISABLED"
D G "USB_EP4_RX_SIZE" 7 707 "0"
D G "USB_EP4_TX_SIZE" 7 718 "0"
D G "USB_EP5_TX_ENABLE" 7 728 "USB_ENABLE_DISABLED"
D G "USB_EP5_RX_ENABLE" 7 731 "USB_ENABLE_DISABLED"
D G "USB_EP5_RX_SIZE" 7 738 "0"
D G "USB_EP5_TX_SIZE" 7 749 "0"
D G "USB_EP6_TX_ENABLE" 7 759 "USB_ENABLE_DISABLED"
D G "USB_EP6_RX_ENABLE" 7 762 "USB_ENABLE_DISABLED"
D G "USB_EP6_RX_SIZE" 7 769 "0"
D G "USB_EP6_TX_SIZE" 7 780 "0"
D G "USB_EP7_TX_ENABLE" 7 790 "USB_ENABLE_DISABLED"
D G "USB_EP7_RX_ENABLE" 7 793 "USB_ENABLE_DISABLED"
D G "USB_EP7_RX_SIZE" 7 800 "0"
D G "USB_EP7_TX_SIZE" 7 811 "0"
D G "USB_EP8_TX_ENABLE" 7 821 "USB_ENABLE_DISABLED"
D G "USB_EP8_RX_ENABLE" 7 824 "USB_ENABLE_DISABLED"
D G "USB_EP8_RX_SIZE" 7 831 "0"
D G "USB_EP8_TX_SIZE" 7 842 "0"
D G "USB_EP9_TX_ENABLE" 7 852 "USB_ENABLE_DISABLED"
D G "USB_EP9_RX_ENABLE" 7 855 "USB_ENABLE_DISABLED"
D G "USB_EP9_RX_SIZE" 7 862 "0"
D G "USB_EP9_TX_SIZE" 7 873 "0"
D G "USB_EP10_TX_ENABLE" 7 883 "USB_ENABLE_DISABLED"
D G "USB_EP10_RX_ENABLE" 7 886 "USB_ENABLE_DISABLED"
D G "USB_EP10_RX_SIZE" 7 893 "0"
D G "USB_EP10_TX_SIZE" 7 904 "0"
D G "USB_EP11_TX_ENABLE" 7 914 "USB_ENABLE_DISABLED"
D G "USB_EP11_RX_ENABLE" 7 917 "USB_ENABLE_DISABLED"
D G "USB_EP11_RX_SIZE" 7 924 "0"
D G "USB_EP11_TX_SIZE" 7 935 "0"
D G "USB_EP12_TX_ENABLE" 7 945 "USB_ENABLE_DISABLED"
D G "USB_EP12_RX_ENABLE" 7 948 "USB_ENABLE_DISABLED"
D G "USB_EP12_RX_SIZE" 7 955 "0"
D G "USB_EP12_TX_SIZE" 7 966 "0"
D G "USB_EP13_TX_ENABLE" 7 976 "USB_ENABLE_DISABLED"
D G "USB_EP13_RX_ENABLE" 7 979 "USB_ENABLE_DISABLED"
D G "USB_EP13_RX_SIZE" 7 986 "0"
D G "USB_EP13_TX_SIZE" 7 997 "0"
D G "USB_EP14_TX_ENABLE" 7 1007 "USB_ENABLE_DISABLED"
D G "USB_EP14_RX_ENABLE" 7 1010 "USB_ENABLE_DISABLED"
D G "USB_EP14_RX_SIZE" 7 1017 "0"
D G "USB_EP14_TX_SIZE" 7 1028 "0"
D G "USB_EP15_TX_ENABLE" 7 1038 "USB_ENABLE_DISABLED"
D G "USB_EP15_RX_ENABLE" 7 1041 "USB_ENABLE_DISABLED"
D G "USB_EP15_RX_SIZE" 7 1048 "0"
D G "USB_EP15_TX_SIZE" 7 1059 "0"
V G "usb_ep_tx_type" 7 1066 "[16]" `777 
V G "usb_ep_rx_type" 7 1075 "[16]" `780 
V G "usb_ep_tx_size" 7 1084 "[16]" `783 
V G "usb_ep_rx_size" 7 1093 "[16]" `786 
D G "USB_TOTAL_CONFIG_LEN" 6 95 "67" "config+interface+class+endpoint+endpoint (2 endpoints)"
V G "USB_CONFIG_DESC" 6 97 "[1]" `789  "IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE:"
C L "usb_isr_tok_in_dne" 6 89 5 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 89 1 "FUNCTION"
D G "USB_MAX_NUM_INTERFACES" 6 198 "2"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
V G "USB_NUM_INTERFACES" 6 201 "[1]" `792 
C L "usb_isr_tok_in_dne" 6 192 5 "FUNCTION"
V G "USB_CLASS_DESCRIPTORS" 6 208 "[1][2][4]" `795  "config 1"
C L "usb_isr_tok_in_dne" 6 192 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
V G "USB_DEVICE_DESC" 6 230 "[18]" `800  "starts of with device configuration. only one possible"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 5 "FUNCTION"
V G "USB_STRING_DESC_OFFSET" 6 261 "int8[1]" `803 
C L "usb_isr_tok_in_dne" 6 192 5 "FUNCTION"
V G "USB_STRING_DESC" 6 268 "[1]" `804  "string 0"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 192 1 "FUNCTION"
V G "usb_cdc_get_buffer_status" 3 310 "{int1 got,int8 len,int8 index}" `811  "usb.c                                 ////"
D G "__USB_DRIVER__" 8 162 ""
D G "debug_usb" 8 181 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)"
D G "debug_putc" 8 182 "(c)"
D G "debug_display_ram" 8 183 "(x,y)"
C L "usb_isr_tok_in_dne" 7 2 294 "FUNCTION"
D G "__PIC18_USB_C__" 9 114 ""
C L "usb_isr_tok_in_dne" 7 2 294 "FUNCTION"
D G "USB_IGNORE_RX_DTS" 9 124 "FALSE"
D G "USB_IGNORE_TX_DTS" 9 128 "FALSE"
D G "__USB_4550__" 9 178 ""
D G "USB_TOTAL_RAM_SPACE" 9 179 " ((unsigned int16)0x400)"
D G "USB_RAM_START" 9 180 "0x400"
D G "USB_NUM_UEP" 9 181 "16"
D G "USB_LAST_ALLOWED_ENDPOINT" 9 182 "16"
D G "USB_BDT_START" 9 196 "USB_RAM_START"
D G "USB_LAST_DEFINED_ENDPOINT" 9 226 "2"
D G "USB_CONTROL_REGISTER_SIZE" 9 233 " ((USB_LAST_DEFINED_ENDPOINT+1)*8)"
D G "USB_DATA_BUFFER_NEEDED" 9 235 " (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE)"
D G "USB_DATA_BUFFER_LOCATION" 9 262 " ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE)"
T G "STRUCT_BD" 9 272 "{int8 stat,int8 cnt,int16 addr}" `879 
C L "usb_isr_tok_in_dne" 9 120 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 9 120 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 9 120 1 "FUNCTION"
V G "g_USBRAM" 9 305 "{}" `894 
D G "g_USBBDT" 9 307 "g_USBRAM.bd"
D G "usb_ep0_rx_buffer" 9 343 "g_USBRAM.buffer.ep0_rx_buffer"
D G "usb_ep0_tx_buffer" 9 344 "g_USBRAM.buffer.ep0_tx_buffer"
D G "usb_ep1_rx_buffer" 9 347 "g_USBRAM.buffer.ep1_rx_buffer"
D G "usb_ep1_tx_buffer" 9 348 "g_USBRAM.buffer.ep1_tx_buffer"
D G "usb_ep2_rx_buffer" 9 349 "g_USBRAM.buffer.ep2_rx_buffer"
D G "usb_ep2_tx_buffer" 9 350 "g_USBRAM.buffer.ep2_tx_buffer"
D G "USB_USE_ERROR_COUNTER" 9 355 "FALSE"
D G "USB_PING_PONG_MODE_OFF" 9 358 "0" "no ping pong"
D G "USB_PING_PONG_MODE_E0" 9 359 "1" "ping pong endpoint 0 only"
D G "USB_PING_PONG_MODE_ON" 9 360 "2" "ping pong all endpoints"
D G "USB_PING_PONG_MODE" 9 364 "USB_PING_PONG_MODE_OFF"
C L "usb_isr_tok_in_dne" 9 120 1 "FUNCTION"
D G "UEP0_LOC" 9 383 "0xF70"
V G "USTATCopy" 9 433 "int8" `905 
V G "g_UEP" 9 435 "int8[16]" `906 
D G "UEP" 9 441 "(x) g_UEP[x]"
D G "BIT_SOF" 9 443 "6"
D G "BIT_STALL" 9 444 "5"
D G "BIT_IDLE" 9 445 "4"
D G "BIT_TRN" 9 446 "3"
D G "BIT_ACTV" 9 447 "2"
D G "BIT_UERR" 9 448 "1"
D G "BIT_URST" 9 449 "0"
D G "EP_BDxST_O" 9 475 "(x)    g_USBBDT[x].out.stat"
D G "EP_BDxCNT_O" 9 476 "(x)   g_USBBDT[x].out.cnt"
D G "EP_BDxADR_O" 9 477 "(x)   g_USBBDT[x].out.addr"
D G "EP_BDxST_I" 9 478 "(x)    g_USBBDT[x].in.stat"
D G "EP_BDxCNT_I" 9 479 "(x)   g_USBBDT[x].in.cnt"
D G "EP_BDxADR_I" 9 480 "(x)   g_USBBDT[x].in.addr"
D G "ENDPT_DISABLED" 9 486 "0x00" "endpoint not used"
D G "ENDPT_IN_ONLY" 9 487 "0x02" "endpoint supports IN transactions only"
D G "ENDPT_OUT_ONLY" 9 488 "0x04" "endpoint supports OUT transactions only"
D G "ENDPT_CONTROL" 9 489 "0x06" "Supports IN, OUT and CONTROL transactions - Only use with EP0"
D G "ENDPT_NON_CONTROL" 9 490 "0x0E" "Supports both IN and OUT transactions"
C L "usb_isr_tok_in_dne" 9 120 1 "FUNCTION"
E G "USB_STATE_DETACHED" 9 493 "0" `928 
E G "USB_STATE_ATTACHED" 9 493 "1" `929 
E G "USB_STATE_POWERED" 9 493 "2" `930 
E G "USB_STATE_DEFAULT" 9 494 "3" `931 
E G "USB_STATE_ADDRESS" 9 494 "4" `932 
E G "USB_STATE_CONFIGURED" 9 494 "5" `933 
V G "usb_state" 9 494 "" `934  "--BDendST has their PIDs upshifed 2"
D G "USB_PIC_PID_IN" 9 497 "0x24" "device to host transactions"
D G "USB_PIC_PID_OUT" 9 498 "0x04" "host to device transactions"
D G "USB_PIC_PID_SETUP" 9 499 "0x34" "host to device setup transaction"
D G "USTAT_IN_E0" 9 501 "4"
D G "USTAT_OUT_SETUP_E0" 9 502 "0"
D G "__USB_UIF_RESET" 9 504 "0x01"
D G "__USB_UIF_ERROR" 9 505 "0x02"
D G "__USB_UIF_ACTIVE" 9 506 "0x04"
D G "__USB_UIF_TOKEN" 9 507 "0x08"
D G "__USB_UIF_IDLE" 9 508 "0x10"
D G "__USB_UIF_STALL" 9 509 "0x20"
D G "__USB_UIF_SOF" 9 510 "0x40"
D G "STANDARD_INTS" 9 515 "__USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET"
D G "__USB_UCFG_UTEYE" 9 518 "0x80"
D G "__USB_UCFG_UOEMON" 9 520 "0x40"
D G "__USB_UCFG_UPUEN" 9 522 "0x10"
D G "__USB_UCFG_UTRDIS" 9 524 "0x08"
D G "__USB_UCFG_FSEN" 9 526 "0x04"
D G "__USB_UCFG_MY_UPUEN" 9 537 "__USB_UCFG_UPUEN"
D G "__UCFG_VAL_ENABLED__" 9 541 " (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE)"
D G "__UCFG_VAL_DISABLED__" 9 547 "__USB_UCFG_UTRDIS"
V G "__setup_0_tx_size" 9 553 "int8" `935  "interrupt handler, specific to PIC18Fxx5x peripheral only"
F G "usb_handle_interrupt" 9 556 "void()" `936 
F G "usb_isr_rst" 9 557 "void()" `937 
F G "usb_isr_uerr" 9 558 "void()" `938 
F G "usb_isr_sof" 9 559 "void()" `939 
F G "usb_isr_activity" 9 560 "void()" `940 
F G "usb_isr_uidle" 9 561 "void()" `941 
F G "usb_isr_tok_dne" 9 562 "void()" `942 
F G "usb_isr_stall" 9 563 "void()" `943 
F G "usb_init_ep0_setup" 9 564 "void()" `944  "BEGIN User Functions:"
C L "usb_init_ep0_setup" 9 120 1 "FUNCTION"
V L "en" 9 573 "int8" `946 
F G "usb_kbhit" 9 574 "int8(int8 en)" `711 
C L "usb_tbe" 9 120 1 "FUNCTION"
V L "en" 9 579 "int8" `949 
F G "usb_tbe" 9 580 "int8(int8 en)" `713 
C L "usb_detach" 9 120 1 "FUNCTION"
F G "usb_detach" 9 586 "void()" `701 
C L "usb_detach" 9 120 1 "FUNCTION"
C L "usb_detach" 9 120 1 "FUNCTION"
C L "usb_detach" 9 120 1 "FUNCTION"
C L "usb_detach" 9 120 1 "FUNCTION"
C L "usb_detach" 9 120 2 "FUNCTION"
C L "usb_attach" 9 120 1 "FUNCTION"
F G "usb_attach" 9 608 "void()" `700 
C L "usb_attach" 9 120 1 "FUNCTION"
C L "usb_attach" 9 120 1 "FUNCTION"
C L "usb_attach" 9 120 1 "FUNCTION"
C L "usb_init_cs" 9 120 1 "FUNCTION"
F G "usb_init_cs" 9 619 "void()" `698 
C L "usb_task" 9 120 1 "FUNCTION"
F G "usb_task" 9 625 "void()" `699 
C L "usb_task" 9 120 1 "FUNCTION"
C L "usb_init" 9 120 1 "FUNCTION"
F G "usb_init" 9 673 "void()" `697 
C L "usb_flush_in" 9 120 1 "FUNCTION"
V L "endpoint" 9 684 "int8" `733 
V L "len" 9 684 "int16" `734 
V L "tgl" 9 684 "USB_DTS_BIT" `951 
F G "usb_flush_in" 9 685 "int8(int8 endpoint,int16 len,USB_DTS_BIT tgl)" `732 
V L "i" 9 686 "int8" `948 
C L "usb_flush_in" 9 120 1 "FUNCTION"
C L "usb_flush_in" 9 120 1 "FUNCTION"
C L "usb_flush_in" 9 120 1 "FUNCTION"
C L "usb_flush_in" 9 120 1 "FUNCTION"
C L "usb_flush_in" 9 120 2 "FUNCTION"
C L "usb_flush_in" 9 120 2 "FUNCTION"
C L "usb_flush_in" 9 120 1 "FUNCTION"
C L "usb_put_packet" 9 120 1 "FUNCTION"
V L "endpoint" 9 742 "int8" `703 
V L "ptr" 9 742 "*int8" `704 
V L "len" 9 742 "int16" `705 
V L "tgl" 9 742 "USB_DTS_BIT" `953 
F G "usb_put_packet" 9 743 "int8(int8 endpoint,*int8 ptr,int16 len,USB_DTS_BIT tgl)" `702 
V L "buff_add" 9 744 "*int8" `949 
C L "usb_put_packet" 9 120 2 "FUNCTION"
C L "usb_flush_out" 9 120 1 "FUNCTION"
V L "endpoint" 9 764 "int8" `737 
V L "tgl" 9 764 "USB_DTS_BIT" `952 
F G "usb_flush_out" 9 765 "void(int8 endpoint,USB_DTS_BIT tgl)" `736 
V L "i" 9 766 "int8" `950 
V L "len" 9 767 "int16" `951 
C L "usb_flush_out" 9 120 1 "FUNCTION"
C L "usb_flush_out" 9 120 1 "FUNCTION"
C L "usb_flush_out" 9 120 1 "FUNCTION"
C L "usb_flush_out" 9 120 1 "FUNCTION"
C L "usb_flush_out" 9 120 1 "FUNCTION"
C L "usb_flush_out" 9 120 2 "FUNCTION"
C L "usb_rx_packet_size" 9 120 1 "FUNCTION"
V L "endpoint" 9 810 "int8" `953 
F G "usb_rx_packet_size" 9 811 "int16(int8 endpoint)" `739 
C L "usb_get_packet_buffer" 9 120 17 "FUNCTION"
V L "endpoint" 9 836 "int8" `953 
V L "ptr" 9 836 "*int8" `954 
V L "max" 9 836 "int16" `955 
F G "usb_get_packet_buffer" 9 837 "int16(int8 endpoint,*int8 ptr,int16 max)" `952 
V L "al" 9 838 "*int8" `956 
V L "st" 9 839 "int8" `957 
V L "i" 9 840 "int16" `958 
C L "usb_get_packet_buffer" 9 120 1 "FUNCTION"
C L "usb_get_packet" 9 120 1 "FUNCTION"
V L "endpoint" 9 858 "int8" `708 
V L "ptr" 9 858 "*int8" `709 
V L "max" 9 858 "int16" `962 
F G "usb_get_packet" 9 859 "int16(int8 endpoint,*int8 ptr,int16 max)" `707 
C L "usb_stall_ep" 9 120 1 "FUNCTION"
V L "endpoint" 9 867 "int8" `960 
F G "usb_stall_ep" 9 868 "void(int8 endpoint)" `715 
V L "direction" 9 869 "int1" `959 
C L "usb_unstall_ep" 9 120 1 "FUNCTION"
V L "endpoint" 9 885 "int8" `961 
F G "usb_unstall_ep" 9 886 "void(int8 endpoint)" `717 
V L "direction" 9 887 "int1" `960 
C L "usb_endpoint_stalled" 9 120 1 "FUNCTION"
V L "endpoint" 9 907 "int8" `962 
F G "usb_endpoint_stalled" 9 908 "int8(int8 endpoint)" `719 
V L "direction" 9 909 "int1" `961 
V L "st" 9 910 "int8" `962 
C L "usb_set_address" 9 120 1 "FUNCTION"
V L "address" 9 928 "int8" `964 
F G "usb_set_address" 9 929 "void(int8 address)" `721 
C L "usb_set_configured" 9 120 1 "FUNCTION"
V L "config" 9 943 "int8" `964 
F G "usb_set_configured" 9 944 "void(int8 config)" `723 
V L "en" 9 945 "int8" `963 
V L "addy" 9 946 "int16" `964 
V L "new_uep" 9 947 "int8" `965 
V L "len" 9 948 "int16" `966 
V L "i" 9 949 "int8" `967 
C L "usb_set_configured" 9 120 1 "FUNCTION"
C L "usb_set_configured" 9 120 1 "FUNCTION"
C L "usb_set_configured" 9 120 1 "FUNCTION"
C L "usb_disable_endpoint" 9 120 1 "FUNCTION"
V L "en" 9 999 "int8" `969 
F G "usb_disable_endpoint" 9 1000 "void(int8 en)" `726 
C L "usb_disable_endpoint" 9 120 1 "FUNCTION"
C L "usb_disable_endpoint" 9 120 1 "FUNCTION"
C L "usb_disable_endpoints" 9 120 1 "FUNCTION"
F G "usb_disable_endpoints" 9 1012 "void()" `725 
V L "i" 9 1013 "int8" `968 
C L "usb_disable_endpoints" 9 120 1 "FUNCTION"
C L "usb_clear_trn" 9 120 2 "FUNCTION"
F G "usb_clear_trn" 9 1027 "void()" `969  "UIR_TRN = 0;"
C L "usb_clear_trn" 9 120 1 "FUNCTION"
F G "usb_isr" 9 1051 "void()" `970 
V L "TRNAttempts" 9 1052 "int8" `971 
C L "usb_isr" 9 120 1 "FUNCTION"
C L "usb_isr" 9 120 1 "FUNCTION"
C L "usb_isr" 9 120 1 "FUNCTION"
C L "usb_isr" 9 120 1 "FUNCTION"
C L "usb_isr" 9 120 1 "FUNCTION"
C L "usb_isr" 9 120 1 "FUNCTION"
C L "usb_isr_sof" 9 120 1 "FUNCTION"
F G "usb_isr_sof" 9 1101 "void()" `939  "UIR_SOF = 0;"
C L "usb_isr_rst" 9 120 6 "FUNCTION"
F G "usb_isr_rst" 9 1116 "void()" `937 
C L "usb_isr_rst" 9 120 1 "FUNCTION"
C L "usb_isr_rst" 9 120 1 "FUNCTION"
C L "usb_init_ep0_setup" 9 120 5 "FUNCTION"
F G "usb_init_ep0_setup" 9 1151 "void()" `944 
C L "usb_init_ep0_setup" 9 120 1 "FUNCTION"
C L "usb_isr_uerr" 9 120 7 "FUNCTION"
F G "usb_isr_uerr" 9 1173 "void()" `938 
C L "usb_isr_uerr" 9 120 1 "FUNCTION"
C L "usb_isr_uidle" 9 120 5 "FUNCTION"
F G "usb_isr_uidle" 9 1239 "void()" `941 
C L "usb_isr_uidle" 9 120 2 "FUNCTION"
C L "usb_isr_uidle" 9 120 1 "FUNCTION"
C L "usb_isr_activity" 9 120 6 "FUNCTION"
F G "usb_isr_activity" 9 1259 "void()" `940 
C L "usb_isr_activity" 9 120 1 "FUNCTION"
C L "usb_isr_activity" 9 120 1 "FUNCTION"
C L "usb_isr_activity" 9 120 1 "FUNCTION"
C L "usb_isr_stall" 9 120 5 "FUNCTION"
F G "usb_isr_stall" 9 1279 "void()" `943 
C L "usb_isr_stall" 9 120 1 "FUNCTION"
C L "usb_request_send_response" 9 120 1 "FUNCTION"
V L "len" 9 1294 "int8" `973 
F G "usb_request_send_response" 9 1294 "void(int8 len)" `728 
F G "usb_request_get_data" 9 1295 "void()" `730 
F G "usb_request_stall" 9 1296 "void()" `731 
C L "usb_isr_tok_dne" 9 120 13 "FUNCTION"
F G "usb_isr_tok_dne" 9 1313 "void()" `942 
V L "en" 9 1314 "int8" `972 
C L "usb_isr_tok_dne" 9 120 1 "FUNCTION"
V L "pidKey" 9 1324 "int8" `973 
C L "usb_isr_tok_dne" 9 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 4 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 2 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 2 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 120 1 "FUNCTION"
D G "USB_ISO_PACKET_MAX_SIZE" 8 214 "1023"
D G "USB_NONISO_PACKET_MAX_SIZE" 8 215 "64"
V G "USB_stack_status" 8 520 "TYPE_USB_STACK_STATUS" `770 
V G "USB_address_pending" 8 522 "int8" `974  "save previous state because packets can take several isrs"
V G "usb_getdesc_ptr" 8 523 "int16" `975 
V G "usb_getdesc_len" 8 523 "int16" `976  "for reading string and config descriptors"
F G "usb_put_0len_0" 8 529 "void()" `977 
V L "endpoint" 8 530 "int8" `979 
V L "status" 8 530 "*int16" `980 
V L "buffer" 8 530 "*int16" `981 
V L "size" 8 530 "*int8" `982 
F G "usb_match_registers" 8 530 "void(int8 endpoint,*int16 status,*int16 buffer,*int8 size)" `978 
F G "usb_isr_tkn_setup_StandardEndpoint" 8 532 "void()" `983 
F G "usb_isr_tkn_setup_StandardDevice" 8 533 "void()" `984 
F G "usb_isr_tkn_setup_StandardInterface" 8 534 "void()" `985 
F G "usb_Get_Descriptor" 8 538 "void()" `986 
F G "usb_copy_desc_seg_to_ep" 8 539 "void()" `987 
F G "usb_finish_set_address" 8 540 "void()" `988 
V G "USB_Interface" 8 542 "int8[2]" `989  "config state for all of our interfaces, NUM_INTERFACES defined with descriptors"
C L "usb_finish_set_address" 8 221 2 "FUNCTION"
F G "usb_enumerated" 8 548 "int8()" `741 
C L "usb_wait_for_enumeration" 8 221 1 "FUNCTION"
F G "usb_wait_for_enumeration" 8 554 "void()" `742 
C L "usb_puts" 8 221 1 "FUNCTION"
V L "endpoint" 8 559 "int8" `749 
V L "ptr" 8 559 "*int8" `750 
V L "len" 8 559 "int16" `751 
V L "timeout" 8 559 "int8" `994 
F G "usb_puts" 8 559 "int8(int8 endpoint,*int8 ptr,int16 len,int8 timeout)" `748 
V L "i" 8 560 "int16" `990 
V L "res" 8 561 "int1" `991 
V L "this_packet_len" 8 562 "int16" `992 
V L "packet_size" 8 563 "int16" `993 
V L "timeout_1us" 8 564 "int32" `994 
C L "usb_puts" 8 221 2 "FUNCTION"
C L "usb_puts" 8 221 1 "FUNCTION"
C L "usb_puts" 8 221 2 "FUNCTION"
C L "usb_puts" 8 221 1 "FUNCTION"
C L "usb_puts" 8 221 1 "FUNCTION"
C L "usb_puts" 8 221 1 "FUNCTION"
C L "usb_gets" 8 221 1 "FUNCTION"
V L "endpoint" 8 608 "int8" `744 
V L "ptr" 8 608 "*int8" `745 
V L "max" 8 608 "int16" `746 
V L "timeout" 8 608 "int16" `1002 
F G "usb_gets" 8 608 "int16(int8 endpoint,*int8 ptr,int16 max,int16 timeout)" `743 
V L "ret" 8 609 "int16" `998 
V L "to" 8 610 "int16" `999 
V L "len" 8 611 "int16" `1000 
V L "packet_size" 8 612 "int16" `1001 
V L "this_packet_max" 8 613 "int16" `1002 
C L "usb_token_reset" 8 221 3 "FUNCTION"
F G "usb_token_reset" 8 645 "void()" `771 
V L "i" 8 646 "int8" `1003 
C L "usb_token_reset" 8 221 1 "FUNCTION"
C L "usb_token_reset" 8 221 1 "FUNCTION"
C L "usb_token_reset" 8 221 1 "FUNCTION"
C L "usb_token_reset" 8 221 1 "FUNCTION"
D G "usb_put_0len_0" 8 670 "() usb_request_send_response(0)"
C L "usb_endpoint_is_valid" 8 221 10 "FUNCTION"
V L "endpoint" 8 683 "int8" `1005 
F G "usb_endpoint_is_valid" 8 684 "int8(int8 endpoint)" `753 
V L "direction" 8 685 "int1" `1004 
C L "usb_endpoint_is_valid" 8 221 1 "FUNCTION"
C L "usb_endpoint_is_valid" 8 221 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 8 221 1 "FUNCTION"
V L "endpoint" 8 703 "int8" `1006 
F G "usb_isr_tok_in_dne" 8 703 "void(int8 endpoint)" `775 
C L "usb_isr_tok_in_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_out_dne" 8 221 1 "FUNCTION"
V L "endpoint" 8 716 "int8" `1006 
F G "usb_isr_tok_out_dne" 8 717 "void(int8 endpoint)" `773  "TODO:"
C L "usb_isr_tok_out_dne" 8 221 2 "FUNCTION"
C L "usb_isr_tok_out_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_out_dne" 8 221 2 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 2 "FUNCTION"
F G "usb_isr_tok_setup_dne" 8 742 "void()" `772 
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardDevice" 8 802 "void()" `984 
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardInterface" 8 881 "void()" `985 
V L "curr_config" 8 882 "int8" `1005 
C L "usb_isr_tkn_setup_StandardInterface" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 3 "FUNCTION"
C L "usb_isr_tkn_setup_StandardEndpoint" 8 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardEndpoint" 8 941 "void()" `983 
C L "usb_Get_Descriptor" 8 221 26 "FUNCTION"
F G "usb_Get_Descriptor" 8 1039 "void()" `986 
C L "usb_Get_Descriptor" 8 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 5 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 3 "FUNCTION"
C L "usb_finish_set_address" 8 221 11 "FUNCTION"
F G "usb_finish_set_address" 8 1119 "void()" `988 
C L "usb_finish_set_address" 8 221 1 "FUNCTION"
C L "usb_finish_set_address" 8 221 1 "FUNCTION"
C L "usb_copy_desc_seg_to_ep" 8 221 3 "FUNCTION"
F G "usb_copy_desc_seg_to_ep" 8 1136 "void()" `987 
V L "i" 8 1137 "int8" `1006 
V L "c" 8 1138 "int8" `1007  "debug_usb(debug_putc, "!%LX! ", &usb_ep0_tx_buffer[0]);"
C L "usb_copy_desc_seg_to_ep" 8 221 1 "FUNCTION"
V G "usb_cdc_line_coding" 3 331 "{int32 dwDTERrate,int8 bCharFormat,int8 bParityType,int8 bDataBits}" `1013  "length of time, in ms, of break signal as we received in a SendBreak message."
V G "usb_cdc_break" 3 335 "int16" `1014 
V G "usb_cdc_encapsulated_cmd" 3 337 "int8[8]" `1015 
V G "usb_cdc_put_buffer" 3 340 "int8[63]" `1016 
D G "usb_cdc_put_buffer_free" 3 345 "()  usb_tbe(USB_CDC_DATA_IN_ENDPOINT)"
T G "usb_cdc_tx_t" 3 350 "int8" `1017 
V G "usb_cdc_put_buffer_nextin" 3 353 "usb_cdc_tx_t" `1018 
D G "usb_cdc_get_buffer_status_buffer" 3 357 "usb_ep2_rx_buffer"
V G "usb_cdc_got_set_line_coding" 3 362 "int1" `1019 
V G "usb_cdc_carrier" 3 368 "{int1 dte_present,int1 active,int6 reserved}" `1024 
E G "USB_CDC_OUT_NOTHING" 3 370 "0" `1026 
E G "USB_CDC_OUT_COMMAND" 3 370 "1" `1027 
E G "USB_CDC_OUT_LINECODING" 3 370 "2" `1028 
E G "USB_CDC_WAIT_0LEN" 3 370 "3" `1029 
V G "__usb_cdc_state" 3 370 "" `1030  "#if defined(__PCH__)"
C L "usb_isr_tok_out_cdc_control_dne" 3 314 6 "FUNCTION"
F G "usb_isr_tok_out_cdc_control_dne" 3 382 "void()" `675 
C L "usb_isr_tok_out_cdc_control_dne" 3 314 1 "FUNCTION"
C L "usb_isr_tok_out_cdc_control_dne" 3 314 1 "FUNCTION"
C L "usb_isr_tok_out_cdc_control_dne" 3 314 2 "FUNCTION"
C L "usb_isr_tok_out_cdc_control_dne" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
F G "usb_isr_tkn_cdc" 3 422 "void()" `673  "make sure the request goes to a CDC interface"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 314 1 "FUNCTION"
C L "usb_isr_tok_out_cdc_data_dne" 3 314 1 "FUNCTION"
F G "usb_isr_tok_out_cdc_data_dne" 3 467 "void()" `677 
C L "usb_isr_tok_out_cdc_data_dne" 3 314 4 "FUNCTION"
C L "usb_isr_tok_in_cdc_data_dne" 3 314 1 "FUNCTION"
F G "usb_isr_tok_in_cdc_data_dne" 3 492 "void()" `676 
F G "usb_cdc_flush_out_buffer" 3 501 "void()" `678 
F G "usb_cdc_init" 3 528 "void()" `674 
T G "cdc_serial_state_t" 3 556 "{int1 bRxCarrier,int1 bTxCarrier,int1 bBreak,int1 bRingSignal,int1 bFraming,int1 bParity,int1 bOverRun,int1 reserved0,int8 reserved1}" `1041  "Send SERIAL_STATE notification to the host.  This contains DSR, DCD, Ring,"
C L "usb_cdc_serial_state" 3 314 4 "FUNCTION"
V L "state" 3 565 "cdc_serial_state_t" `1043 
F G "usb_cdc_serial_state" 3 566 "int8(cdc_serial_state_t state)" `1042 
D G "CDC_EP1_NOTIFY_BUFFER" 3 568 "usb_ep1_tx_buffer"
C L "usb_cdc_serial_state" 3 314 1 "FUNCTION"
C L "usb_cdc_serial_state" 3 314 2 "FUNCTION"
C L "usb_cdc_serial_state" 3 314 2 "FUNCTION"
C L "usb_cdc_serial_state" 3 314 1 "FUNCTION"
C L "usb_cdc_serial_state" 3 314 1 "FUNCTION"
C L "usb_cdc_serial_state" 3 314 1 "FUNCTION"
C L "usb_cdc_serial_state" 3 314 1 "FUNCTION"
F G "usb_cdc_get_discard" 3 604 "void()" `672 
F G "usb_cdc_getc" 3 610 "int8()" `669 
V L "c" 3 611 "int8" `1044 
D G "__USB_PAUSE_ISR" 3 689 "()  int1 old_usbie; old_usbie = USBIE; USBIE = 0"
D G "__USB_RESTORE_ISR" 3 690 "() USBIE = old_usbie"
V L "c" 3 693 "int8" `1046 
F G "_usb_cdc_putc_fast_noflush" 3 694 "void(int8 c)" `1045 
V L "old_usbie" 3 695 "int1" `1047 
C L "_usb_cdc_putc_fast_noflush" 3 314 1 "FUNCTION"
V L "c" 3 712 "int8" `1049 
F G "usb_cdc_putc_fast" 3 713 "void(int8 c)" `667 
C L "usb_cdc_putc_fast" 3 314 1 "FUNCTION"
C L "usb_cdc_putc_fast" 3 314 1 "FUNCTION"
C L "usb_cdc_putc_fast" 3 314 1 "FUNCTION"
V L "c" 3 735 "int8" `1049 
F G "usb_cdc_putc" 3 736 "void(int8 c)" `670 
C L "usb_cdc_putc" 3 314 2 "FUNCTION"
C L "usb_cdc_putc" 3 314 2 "FUNCTION"
V L "ptr" 3 757 "*int8" `1049 
F G "usb_cdc_puts" 3 758 "int8(*int8 ptr)" `1048 
V L "i" 3 762 "int8" `1050 
V L "c" 3 764 "int8" `1051 
D G "_CTYPE" 10 12 ""
D G "islower" 10 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 10 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 10 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 10 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 10 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 10 19 "(x)  ((x)==' ')"
D G "isxdigit" 10 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 10 21 "(x)  ((x)<' ')"
D G "isprint" 10 22 "(x)  ((x)>=' ')"
D G "isgraph" 10 23 "(x)  ((x)>' ')"
D G "ispunct" 10 24 "(x)  (((x)>' ')&&!isalnum(x))"
F G "gethex1_usb" 3 791 "int8()" `666 
V L "digit" 3 792 "int8" `1052 
F G "gethex_usb" 3 804 "int8()" `665 
V L "lo" 3 805 "int8" `1053 
V L "hi" 3 805 "int8" `1054 
V L "s" 3 815 "*int8" `663 
V L "max" 3 815 "int8" `1057 
F G "get_string_usb" 3 815 "void(*int8 s,int8 max)" `662 
V L "len" 3 816 "int8" `1055 
V L "c" 3 817 "int8" `1056 
C L "get_string_usb" 3 823 1 "FUNCTION"
D G "__NO_UART__" 11 1 ""
D G "_STRING" 12 12 ""
D G "_STDDEF" 13 13 ""
D G "ptrdiff_t" 13 18 "unsigned int16"
D G "size_t" 13 24 "unsigned int16"
D G "wchar_t" 13 26 "char"
D G "NULL" 13 27 "0"
D G "offsetof" 13 29 "(s,f) (offsetofbit(s,f)/8)"
C L "memmove" 10 2 7 "FUNCTION"
C L "memmove" 12 19 10 "FUNCTION"
V L "s1" 12 34 "*int8" `1058 
V L "s2" 12 34 "*int8" `1059 
V L "n" 12 34 "int16" `1060 
F G "memmove" 12 35 "*int8(*int8 s1,*int8 s2,int16 n)" `1057 
V L "sc1" 12 36 "*int8" `1061 
V L "sc2" 12 37 "*int8" `1062 
D G "strcopy" 12 54 "strcpy"
C L "strncpy" 12 19 4 "FUNCTION"
V L "s1" 12 61 "*int8" `1064 
V L "s2" 12 61 "*int8" `1065 
V L "n" 12 61 "int16" `1066 
F G "strncpy" 12 62 "*int8(*int8 s1,*int8 s2,int16 n)" `1063 
V L "s" 12 63 "*int8" `1067 
C L "strcat" 12 19 3 "FUNCTION"
V L "s1" 12 78 "*int8" `1069 
V L "s2" 12 78 "*int8" `1070 
F G "strcat" 12 79 "*int8(*int8 s1,*int8 s2)" `1068 
V L "s" 12 80 "*int8" `1071 
C L "strncat" 12 19 2 "FUNCTION"
V L "s1" 12 96 "*int8" `1073 
V L "s2" 12 96 "*int8" `1074 
V L "n" 12 96 "int16" `1075 
F G "strncat" 12 97 "*int8(*int8 s1,*int8 s2,int16 n)" `1072 
V L "s" 12 98 "*int8" `1076 
C L "memcmp" 12 19 3 "FUNCTION"
V L "s1" 12 120 "*int8" `1078 
V L "s2" 12 120 "*int8" `1079 
V L "n" 12 120 "int16" `1080 
F G "memcmp" 12 121 "sint8(*int8 s1,*int8 s2,int16 n)" `1077 
V L "su1" 12 122 "*int8" `1081 
V L "su2" 12 122 "*int8" `1082 
C L "strcmp" 12 19 2 "FUNCTION"
V L "s1" 12 134 "*int8" `1084 
V L "s2" 12 134 "*int8" `1085 
F G "strcmp" 12 135 "sint8(*int8 s1,*int8 s2)" `1083 
C L "strcoll" 12 19 2 "FUNCTION"
V L "s1" 12 144 "*int8" `1087 
V L "s2" 12 144 "*int8" `1088 
F G "strcoll" 12 145 "sint8(*int8 s1,*int8 s2)" `1086 
C L "strncmp" 12 19 4 "FUNCTION"
V L "s1" 12 157 "*int8" `1090 
V L "s2" 12 157 "*int8" `1091 
V L "n" 12 157 "int16" `1092 
F G "strncmp" 12 158 "sint8(*int8 s1,*int8 s2,int16 n)" `1089 
C L "strxfrm" 12 19 3 "FUNCTION"
V L "s1" 12 169 "*int8" `1094 
V L "s2" 12 169 "*int8" `1095 
V L "n" 12 169 "int16" `1096 
F G "strxfrm" 12 170 "int16(*int8 s1,*int8 s2,int16 n)" `1093 
V L "s" 12 171 "*int8" `1097 
V L "n1" 12 172 "int8" `1098 
C L "memchr" 12 19 3 "FUNCTION"
V L "s" 12 191 "*int8" `1100 
V L "c" 12 191 "int8" `1101 
V L "n" 12 191 "int16" `1102 
F G "memchr" 12 192 "*int8(*int8 s,int8 c,int16 n)" `1099 
V L "uc" 12 193 "int8" `1103 
V L "su" 12 194 "*int8" `1104 
C L "strchr" 12 19 2 "FUNCTION"
V L "s" 12 205 "*int8" `1106 
V L "c" 12 205 "int8" `1107 
F G "strchr" 12 206 "*int8(*int8 s,int8 c)" `1105 
C L "strcspn" 12 19 4 "FUNCTION"
V L "s1" 12 217 "*int8" `1109 
V L "s2" 12 217 "*int8" `1110 
F G "strcspn" 12 218 "int8(*int8 s1,*int8 s2)" `1108 
V L "sc1" 12 219 "*int8" `1111 
V L "sc2" 12 219 "*int8" `1112 
C L "strpbrk" 12 19 4 "FUNCTION"
V L "s1" 12 232 "*int8" `1114 
V L "s2" 12 232 "*int8" `1115 
F G "strpbrk" 12 233 "*int8(*int8 s1,*int8 s2)" `1113 
V L "sc1" 12 234 "*int8" `1116 
V L "sc2" 12 234 "*int8" `1117 
C L "strrchr" 12 19 2 "FUNCTION"
V L "s" 12 247 "*int8" `1119 
V L "c" 12 247 "int8" `1120 
F G "strrchr" 12 248 "*int8(*int8 s,int8 c)" `1118 
V L "p" 12 249 "*int8" `1121 
C L "strspn" 12 19 2 "FUNCTION"
V L "s1" 12 262 "*int8" `1123 
V L "s2" 12 262 "*int8" `1124 
F G "strspn" 12 263 "int8(*int8 s1,*int8 s2)" `1122 
V L "sc1" 12 264 "*int8" `1125 
V L "sc2" 12 264 "*int8" `1126 
C L "strstr" 12 19 6 "FUNCTION"
V L "s1" 12 281 "*int8" `1128 
V L "s2" 12 281 "*int8" `1129 
F G "strstr" 12 282 "*int8(*int8 s1,*int8 s2)" `1127 
V L "s" 12 283 "*int8" `1130 
V L "t" 12 283 "*int8" `1131 
C L "strtok" 12 19 13 "FUNCTION"
V L "s1" 12 320 "*int8" `1133 
V L "s2" 12 320 "*int8" `1134 
F G "strtok" 12 321 "*int8(*int8 s1,*int8 s2)" `1132 
V L "beg" 12 322 "*int8" `1135 
V L "end" 12 322 "*int8" `1136 
V L "save" 12 323 "*int8" `1137 
C L "strlen" 12 19 6 "FUNCTION"
V L "s" 12 369 "*int8" `1139 
F G "strlen" 12 370 "int8(*int8 s)" `1138 
V L "sc" 12 371 "*int8" `1140 
C L "stricmp" 12 19 2 "FUNCTION"
V L "s1" 12 380 "*int8" `1142 
V L "s2" 12 380 "*int8" `1143 
F G "stricmp" 12 381 "sint8(*int8 s1,*int8 s2)" `1141 
C L "strlwr" 12 19 3 "FUNCTION"
V L "s" 12 394 "*int8" `1147 
F G "strlwr" 12 395 "*int8(*int8 s)" `1146 
V L "p" 12 396 "*int8" `1148 
C L "strupr" 12 19 3 "FUNCTION"
V L "s" 12 408 "*int8" `1150 
F G "strupr" 12 409 "*int8(*int8 s)" `1149 
V L "p" 12 410 "*int8" `1151 
D G "LED1" 11 9 "PIN_b0" "green"
D G "LED2" 11 10 "PIN_d1" "yellow"
D G "LED3" 11 11 "PIN_B5" "red"
D G "BUTTON_PRESSED" 11 12 "() !input(PIN_A4)"
D G "LED_ON" 11 13 "output_HIGH"
D G "LED_OFF" 11 14 "output_low"
D G "uart_putc" 11 16 "(c)"
D G "uart_getc" 11 17 "()  (0)"
D G "uart_kbhit" 11 18 "() (FALSE)"
D G "uart_printf" 11 19 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) { }"
D G "uart_task" 11 20 "()"
C L "usb_debug_task" 11 67 5 "FUNCTION"
F G "usb_debug_task" 11 78 "void()" `1152 
V L "last_connected" 11 79 "int8" `1153 
V L "last_enumerated" 11 80 "int8" `1154 
V L "new_connected" 11 81 "int8" `1155 
V L "new_enumerated" 11 82 "int8" `1156 
V L "last_cdc" 11 83 "int8" `1157 
V L "new_cdc" 11 84 "int8" `1158 
C L "cdc_serial_state_task" 11 67 1 "FUNCTION"
F G "cdc_serial_state_task" 11 123 "void()" `1159 
V L "newState" 11 124 "cdc_serial_state_t" `1160 
V L "lastState" 11 125 "cdc_serial_state_t" `1161 
C L "cdc_serial_state_task" 11 67 1 "FUNCTION"
C L "cdc_serial_state_task" 11 67 1 "FUNCTION"
D G "HW_INIT" 11 150 "()"
F G "MAIN" 0 7 "void()" `1166 
V L "c" 0 8 "int8" `1167 
C L "MAIN" 0 15 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
